// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/apps/apps.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	github_com_pokt_network_pocket_core_types "github.com/pokt-network/pocket-core/types"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Application defines the total amount of bond shares and their exchange rate to
// coins. Slashing results in a decrease in the exchange rate, allowing correct
// calculation of future undelegations without iterating over delegators.
// When coins are delegated to this validator, the validator is credited with a
// delegation whose number of bond shares is based on the amount of coins
// delegated divided by the current exchange rate. Voting power can be
// calculated as total bonded shares multiplied by exchange rate.
type ApplicationEncodable struct {
	Address                 github_com_pokt_network_pocket_core_types.Address     `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"address" yaml:"address"`
	PublicKey               string                                                `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed                  bool                                                  `protobuf:"varint,3,opt,name=jailed,proto3" json:"public_key" yaml:"jailed"`
	Status                  github_com_pokt_network_pocket_core_types.StakeStatus `protobuf:"varint,4,opt,name=status,proto3,casttype=github.com/pokt-network/pocket-core/types.StakeStatus" json:"status" yaml:"status"`
	Chains                  []string                                              `protobuf:"bytes,5,rep,name=chains,proto3" json:"chains" yaml:"chains"`
	StakedTokens            github_com_pokt_network_pocket_core_types.Int         `protobuf:"bytes,6,opt,name=staked_tokens,json=stakedTokens,proto3,customtype=github.com/pokt-network/pocket-core/types.Int" json:"staked_tokens" yaml:"staked_tokens"`
	MaxRelays               github_com_pokt_network_pocket_core_types.Int         `protobuf:"bytes,7,opt,name=max_relays,json=maxRelays,proto3,customtype=github.com/pokt-network/pocket-core/types.Int" json:"max_relays" yaml:"max_relays"`
	UnstakingCompletionTime time.Time                                             `protobuf:"bytes,8,opt,name=unstaking_completion_time,json=unstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
}

func (m *ApplicationEncodable) Reset()         { *m = ApplicationEncodable{} }
func (m *ApplicationEncodable) String() string { return proto.CompactTextString(m) }
func (*ApplicationEncodable) ProtoMessage()    {}
func (*ApplicationEncodable) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d5a21b1d350fd62, []int{0}
}
func (m *ApplicationEncodable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationEncodable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationEncodable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationEncodable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationEncodable.Merge(m, src)
}
func (m *ApplicationEncodable) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationEncodable) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationEncodable.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationEncodable proto.InternalMessageInfo

// Pool - tracking bonded and not-bonded token supply of the bond denomination
type Pool struct {
	Tokens github_com_pokt_network_pocket_core_types.Int `protobuf:"bytes,1,opt,name=tokens,proto3,customtype=github.com/pokt-network/pocket-core/types.Int" json:"tokens"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d5a21b1d350fd62, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

type PrevStatePowerMapping struct {
	Address github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"address,omitempty"`
	Power   int64                                             `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *PrevStatePowerMapping) Reset()         { *m = PrevStatePowerMapping{} }
func (m *PrevStatePowerMapping) String() string { return proto.CompactTextString(m) }
func (*PrevStatePowerMapping) ProtoMessage()    {}
func (*PrevStatePowerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d5a21b1d350fd62, []int{2}
}
func (m *PrevStatePowerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrevStatePowerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrevStatePowerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrevStatePowerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrevStatePowerMapping.Merge(m, src)
}
func (m *PrevStatePowerMapping) XXX_Size() int {
	return m.Size()
}
func (m *PrevStatePowerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PrevStatePowerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PrevStatePowerMapping proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ApplicationEncodable)(nil), "x.apps.ApplicationEncodable")
	proto.RegisterType((*Pool)(nil), "x.apps.Pool")
	proto.RegisterType((*PrevStatePowerMapping)(nil), "x.apps.PrevStatePowerMapping")
}

func init() { proto.RegisterFile("x/apps/apps.proto", fileDescriptor_5d5a21b1d350fd62) }

var fileDescriptor_5d5a21b1d350fd62 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbf, 0x6f, 0xd3, 0x4e,
	0x1c, 0xcd, 0x7d, 0xdb, 0xba, 0xc9, 0x7d, 0xdb, 0x4a, 0xb5, 0x52, 0x61, 0x8a, 0x94, 0x8b, 0xcc,
	0x92, 0xa5, 0x36, 0x50, 0x55, 0x48, 0xd9, 0x6a, 0xc4, 0x00, 0xa8, 0xa2, 0x72, 0x3b, 0x20, 0x06,
	0xa2, 0x8b, 0x73, 0xb8, 0xc6, 0x3f, 0xee, 0x64, 0x5f, 0x68, 0x32, 0xb3, 0x20, 0xc1, 0xd0, 0x91,
	0xb1, 0xff, 0x07, 0xff, 0x40, 0xc7, 0x8e, 0x88, 0xe1, 0x40, 0xed, 0x82, 0x32, 0xa1, 0x8c, 0x4c,
	0xe8, 0xee, 0x9c, 0xba, 0x85, 0xa5, 0x2a, 0x4b, 0xe4, 0xf7, 0xee, 0x3e, 0xef, 0xbd, 0xcf, 0xdd,
	0xe7, 0x02, 0x57, 0x47, 0x2e, 0x66, 0xac, 0x50, 0x3f, 0x0e, 0xcb, 0x29, 0xa7, 0xa6, 0x31, 0x72,
	0x24, 0x5a, 0x6f, 0x86, 0x34, 0xa4, 0x8a, 0x72, 0xe5, 0x97, 0x5e, 0x5d, 0x47, 0x21, 0xa5, 0x61,
	0x42, 0x5c, 0x85, 0xfa, 0xc3, 0xd7, 0x2e, 0x8f, 0x52, 0x52, 0x70, 0x9c, 0x32, 0xbd, 0xc1, 0xfe,
	0x6c, 0xc0, 0xe6, 0x36, 0x63, 0x49, 0x14, 0x60, 0x1e, 0xd1, 0xec, 0x71, 0x16, 0xd0, 0x01, 0xee,
	0x27, 0xc4, 0x4c, 0xe0, 0x22, 0x1e, 0x0c, 0x72, 0x52, 0x14, 0x16, 0x68, 0x83, 0xce, 0x92, 0xe7,
	0x4f, 0x04, 0x9a, 0x51, 0x53, 0x81, 0x56, 0xc6, 0x38, 0x4d, 0xba, 0x76, 0x49, 0xd8, 0xbf, 0x04,
	0xba, 0x1f, 0x46, 0xfc, 0x60, 0xd8, 0x77, 0x02, 0x9a, 0xba, 0x8c, 0xc6, 0x7c, 0x23, 0x23, 0xfc,
	0x90, 0xe6, 0xb1, 0xcb, 0x68, 0x10, 0x13, 0xbe, 0x11, 0xd0, 0x9c, 0xb8, 0x7c, 0xcc, 0x48, 0xe1,
	0x6c, 0xeb, 0x2a, 0x7f, 0xa6, 0x67, 0x7a, 0x10, 0xb2, 0x61, 0x3f, 0x89, 0x82, 0x5e, 0x4c, 0xc6,
	0xd6, 0x7f, 0x6d, 0xd0, 0x69, 0x78, 0x77, 0x27, 0x02, 0x5d, 0x62, 0xa7, 0x02, 0xad, 0x6a, 0xcf,
	0x8a, 0xb3, 0xfd, 0x86, 0x06, 0xcf, 0xc8, 0xd8, 0x7c, 0x08, 0x8d, 0x37, 0x38, 0x4a, 0xc8, 0xc0,
	0x9a, 0x6b, 0x83, 0x4e, 0xdd, 0x43, 0x7f, 0xd5, 0x2f, 0xeb, 0x7a, 0xbd, 0xcb, 0xf6, 0xcb, 0xed,
	0x66, 0x02, 0x8d, 0x82, 0x63, 0x3e, 0x2c, 0xac, 0xf9, 0x36, 0xe8, 0x2c, 0x78, 0xfb, 0x13, 0x81,
	0x4a, 0xa6, 0x2a, 0xd2, 0x58, 0xf6, 0xb9, 0x75, 0xfd, 0x3e, 0xf7, 0x38, 0x8e, 0xc9, 0x9e, 0xaa,
	0xf4, 0x4b, 0x45, 0x73, 0x13, 0x1a, 0xc1, 0x01, 0x8e, 0xb2, 0xc2, 0x5a, 0x68, 0xcf, 0x75, 0x1a,
	0xde, 0x1d, 0xe9, 0xa6, 0x99, 0xca, 0x4d, 0x63, 0xdb, 0x2f, 0x17, 0xcc, 0x77, 0x00, 0x2e, 0x17,
	0x52, 0x6c, 0xd0, 0xe3, 0x34, 0x26, 0x59, 0x61, 0x19, 0xea, 0x8c, 0x5e, 0x9d, 0x08, 0x54, 0xfb,
	0x2a, 0xd0, 0xc6, 0xf5, 0x33, 0x3d, 0xc9, 0xf8, 0x44, 0xa0, 0xab, 0x6a, 0x53, 0x81, 0x9a, 0x17,
	0x6d, 0x56, 0xb4, 0xed, 0x2f, 0x69, 0xbc, 0xaf, 0xa0, 0x79, 0x08, 0x61, 0x8a, 0x47, 0xbd, 0x9c,
	0x24, 0x78, 0x5c, 0x58, 0x8b, 0x2a, 0xc1, 0x8b, 0x9b, 0x26, 0xb8, 0x24, 0x55, 0x5d, 0x6d, 0xc5,
	0xd9, 0x7e, 0x23, 0xc5, 0x23, 0x5f, 0x7d, 0x9b, 0x1f, 0x00, 0xbc, 0x3d, 0xcc, 0x64, 0x96, 0x28,
	0x0b, 0x7b, 0x01, 0x4d, 0x59, 0x42, 0xe4, 0xb8, 0xf6, 0xe4, 0x38, 0x5b, 0xf5, 0x36, 0xe8, 0xfc,
	0xff, 0x60, 0xdd, 0xd1, 0xb3, 0xee, 0xcc, 0x66, 0xdd, 0xd9, 0x9f, 0xcd, 0xba, 0xb7, 0x29, 0x43,
	0x4e, 0x04, 0x5a, 0xa9, 0x44, 0x64, 0xe5, 0x54, 0xa0, 0x35, 0xed, 0x7b, 0x95, 0xb7, 0x8f, 0xbe,
	0x21, 0xe0, 0xdf, 0xba, 0x20, 0x1f, 0x5d, 0x18, 0x4a, 0xc9, 0x6e, 0xfd, 0xfd, 0x31, 0xaa, 0xfd,
	0x38, 0x46, 0xc0, 0xee, 0xc1, 0xf9, 0x5d, 0x4a, 0x13, 0x73, 0x07, 0x1a, 0xe5, 0xb5, 0x00, 0x75,
	0x28, 0x5b, 0x37, 0x3a, 0x14, 0xbf, 0x14, 0xe9, 0xd6, 0xa5, 0xf8, 0x4f, 0x69, 0xf0, 0x11, 0xc0,
	0xb5, 0xdd, 0x9c, 0xbc, 0x95, 0x33, 0x44, 0x76, 0xe9, 0x21, 0xc9, 0x77, 0x30, 0x63, 0x51, 0x16,
	0x9a, 0xcf, 0xff, 0x7c, 0x9f, 0x5b, 0xff, 0xf8, 0x04, 0x9b, 0x70, 0x81, 0x49, 0x03, 0xf5, 0xfa,
	0xe6, 0x7c, 0x0d, 0xba, 0x4b, 0xb2, 0xd7, 0x4f, 0xc7, 0x08, 0xc8, 0x48, 0xde, 0xd3, 0x93, 0xb3,
	0x16, 0x38, 0x3d, 0x6b, 0x81, 0xef, 0x67, 0x2d, 0x70, 0x74, 0xde, 0xaa, 0x9d, 0x9e, 0xb7, 0x6a,
	0x5f, 0xce, 0x5b, 0xb5, 0x97, 0xf7, 0xae, 0xe3, 0x5c, 0xfe, 0x7b, 0xa9, 0x00, 0x7d, 0x43, 0xdd,
	0xd3, 0xe6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xe7, 0x88, 0x25, 0xd4, 0x04, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return AppsDescription()
}
func AppsDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 5037 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x6b, 0x70, 0x24, 0xd7,
		0x55, 0xde, 0x79, 0x6a, 0xe6, 0xcc, 0x68, 0xd4, 0x6a, 0x69, 0x77, 0x67, 0xe5, 0x78, 0x67, 0x3d,
		0x7e, 0xac, 0xec, 0xcd, 0x6a, 0x9d, 0x7d, 0xda, 0xb3, 0xc4, 0x66, 0x46, 0x9a, 0x55, 0xb4, 0xd6,
		0x63, 0xd2, 0x92, 0x62, 0x7b, 0xa9, 0xd0, 0xd5, 0xea, 0xb9, 0x1a, 0xf5, 0xaa, 0xa7, 0xbb, 0xd3,
		0xdd, 0xb3, 0xbb, 0x72, 0xf1, 0xc3, 0x94, 0x79, 0x24, 0x24, 0x10, 0x87, 0xa4, 0xc0, 0x31, 0x8e,
		0x71, 0x42, 0x81, 0x21, 0x3c, 0xc3, 0x23, 0x10, 0xf2, 0x27, 0x14, 0x05, 0xf8, 0x07, 0x45, 0xc5,
		0x55, 0xfc, 0xa0, 0xf8, 0x31, 0xa4, 0x6c, 0x57, 0x11, 0x84, 0x81, 0x20, 0x4c, 0x15, 0x85, 0xff,
		0x50, 0xf7, 0xd5, 0xd3, 0xdd, 0x33, 0xda, 0x1e, 0x2d, 0xb5, 0xce, 0x9f, 0xdd, 0xe9, 0x73, 0xcf,
		0xf7, 0xdd, 0x7b, 0xcf, 0x3d, 0xf7, 0x9c, 0x73, 0x6f, 0xb7, 0xe0, 0x2f, 0x2f, 0xc3, 0x89, 0x96,
		0x69, 0xb6, 0x74, 0x74, 0xc6, 0xb2, 0x4d, 0xd7, 0xdc, 0xe8, 0x6c, 0x9e, 0x69, 0x22, 0x47, 0xb5,
		0x35, 0xcb, 0x35, 0xed, 0x19, 0x22, 0x13, 0xc7, 0xa8, 0xc6, 0x0c, 0xd7, 0x28, 0x2f, 0xc1, 0xf8,
		0x15, 0x4d, 0x47, 0x73, 0x9e, 0xe2, 0x2a, 0x72, 0xc5, 0xc7, 0x20, 0xb9, 0xa9, 0xe9, 0xa8, 0x18,
		0x3b, 0x91, 0x98, 0xce, 0x9d, 0x7d, 0x60, 0x26, 0x04, 0x9a, 0x09, 0x22, 0x1a, 0x58, 0x2c, 0x11,
		0x44, 0xf9, 0x9d, 0x24, 0x4c, 0x0c, 0x68, 0x15, 0x45, 0x48, 0x1a, 0x4a, 0x1b, 0x33, 0xc6, 0xa6,
		0xb3, 0x12, 0xf9, 0x2d, 0x16, 0x61, 0xc4, 0x52, 0xd4, 0x6d, 0xa5, 0x85, 0x8a, 0x71, 0x22, 0xe6,
		0x8f, 0xe2, 0x71, 0x80, 0x26, 0xb2, 0x90, 0xd1, 0x44, 0x86, 0xba, 0x53, 0x4c, 0x9c, 0x48, 0x4c,
		0x67, 0x25, 0x9f, 0x44, 0x3c, 0x05, 0xe3, 0x56, 0x67, 0x43, 0xd7, 0x54, 0xd9, 0xa7, 0x06, 0x27,
		0x12, 0xd3, 0x29, 0x49, 0xa0, 0x0d, 0x73, 0x3d, 0xe5, 0x93, 0x30, 0x76, 0x13, 0x29, 0xdb, 0x7e,
		0xd5, 0x1c, 0x51, 0x2d, 0x60, 0xb1, 0x4f, 0x71, 0x16, 0xf2, 0x6d, 0xe4, 0x38, 0x4a, 0x0b, 0xc9,
		0xee, 0x8e, 0x85, 0x8a, 0x49, 0x32, 0xfb, 0x13, 0x7d, 0xb3, 0x0f, 0xcf, 0x3c, 0xc7, 0x50, 0x6b,
		0x3b, 0x16, 0x12, 0xab, 0x90, 0x45, 0x46, 0xa7, 0x4d, 0x19, 0x52, 0xfb, 0xd8, 0xaf, 0x6e, 0x74,
		0xda, 0x61, 0x96, 0x0c, 0x86, 0x31, 0x8a, 0x11, 0x07, 0xd9, 0x37, 0x34, 0x15, 0x15, 0xd3, 0x84,
		0xe0, 0x64, 0x1f, 0xc1, 0x2a, 0x6d, 0x0f, 0x73, 0x70, 0x9c, 0x38, 0x0b, 0x59, 0x74, 0xcb, 0x45,
		0x86, 0xa3, 0x99, 0x46, 0x71, 0x84, 0x90, 0x3c, 0x38, 0x60, 0x15, 0x91, 0xde, 0x0c, 0x53, 0xf4,
		0x70, 0xe2, 0x45, 0x18, 0x31, 0x2d, 0x57, 0x33, 0x0d, 0xa7, 0x98, 0x39, 0x11, 0x9b, 0xce, 0x9d,
		0xfd, 0xd0, 0x40, 0x47, 0x58, 0xa1, 0x3a, 0x12, 0x57, 0x16, 0x17, 0x40, 0x70, 0xcc, 0x8e, 0xad,
		0x22, 0x59, 0x35, 0x9b, 0x48, 0xd6, 0x8c, 0x4d, 0xb3, 0x98, 0x25, 0x04, 0xa5, 0xfe, 0x89, 0x10,
		0xc5, 0x59, 0xb3, 0x89, 0x16, 0x8c, 0x4d, 0x53, 0x2a, 0x38, 0x81, 0x67, 0xf1, 0x08, 0xa4, 0x9d,
		0x1d, 0xc3, 0x55, 0x6e, 0x15, 0xf3, 0xc4, 0x43, 0xd8, 0x53, 0xf9, 0x5b, 0x69, 0x18, 0x1b, 0xc6,
		0xc5, 0x2e, 0x43, 0x6a, 0x13, 0xcf, 0xb2, 0x18, 0x3f, 0x88, 0x0d, 0x28, 0x26, 0x68, 0xc4, 0xf4,
		0x1d, 0x1a, 0xb1, 0x0a, 0x39, 0x03, 0x39, 0x2e, 0x6a, 0x52, 0x8f, 0x48, 0x0c, 0xe9, 0x53, 0x40,
		0x41, 0xfd, 0x2e, 0x95, 0xbc, 0x23, 0x97, 0x7a, 0x06, 0xc6, 0xbc, 0x21, 0xc9, 0xb6, 0x62, 0xb4,
		0xb8, 0x6f, 0x9e, 0x89, 0x1a, 0xc9, 0x4c, 0x9d, 0xe3, 0x24, 0x0c, 0x93, 0x0a, 0x28, 0xf0, 0x2c,
		0xce, 0x01, 0x98, 0x06, 0x32, 0x37, 0xe5, 0x26, 0x52, 0xf5, 0x62, 0x66, 0x1f, 0x2b, 0xad, 0x60,
		0x95, 0x3e, 0x2b, 0x99, 0x54, 0xaa, 0xea, 0xe2, 0xe3, 0x3d, 0x57, 0x1b, 0xd9, 0xc7, 0x53, 0x96,
		0xe8, 0x26, 0xeb, 0xf3, 0xb6, 0x75, 0x28, 0xd8, 0x08, 0xfb, 0x3d, 0x6a, 0xb2, 0x99, 0x65, 0xc9,
		0x20, 0x66, 0x22, 0x67, 0x26, 0x31, 0x18, 0x9d, 0xd8, 0xa8, 0xed, 0x7f, 0x14, 0xef, 0x07, 0x4f,
		0x20, 0x13, 0xb7, 0x02, 0x12, 0x85, 0xf2, 0x5c, 0xb8, 0xac, 0xb4, 0xd1, 0xd4, 0x73, 0x50, 0x08,
		0x9a, 0x47, 0x9c, 0x84, 0x94, 0xe3, 0x2a, 0xb6, 0x4b, 0xbc, 0x30, 0x25, 0xd1, 0x07, 0x51, 0x80,
		0x04, 0x32, 0x9a, 0x24, 0xca, 0xa5, 0x24, 0xfc, 0x53, 0xfc, 0xd1, 0xde, 0x84, 0x13, 0x64, 0xc2,
		0x0f, 0xf5, 0xaf, 0x68, 0x80, 0x39, 0x3c, 0xef, 0xa9, 0x4b, 0x30, 0x1a, 0x98, 0xc0, 0xb0, 0x5d,
		0x97, 0x7f, 0x02, 0x0e, 0x0f, 0xa4, 0x16, 0x9f, 0x81, 0xc9, 0x8e, 0xa1, 0x19, 0x2e, 0xb2, 0x2d,
		0x1b, 0x61, 0x8f, 0xa5, 0x5d, 0x15, 0xff, 0x79, 0x64, 0x1f, 0x9f, 0x5b, 0xf7, 0x6b, 0x53, 0x16,
		0x69, 0xa2, 0xd3, 0x2f, 0x7c, 0x24, 0x9b, 0xf9, 0xfe, 0x88, 0xf0, 0xfc, 0xf3, 0xcf, 0x3f, 0x1f,
		0x2f, 0xff, 0x45, 0x1a, 0x26, 0x07, 0xed, 0x99, 0x81, 0xdb, 0xf7, 0x08, 0xa4, 0x8d, 0x4e, 0x7b,
		0x03, 0xd9, 0xc4, 0x48, 0x29, 0x89, 0x3d, 0x89, 0x55, 0x48, 0xe9, 0xca, 0x06, 0xd2, 0x8b, 0xc9,
		0x13, 0xb1, 0xe9, 0xc2, 0xd9, 0x53, 0x43, 0xed, 0xca, 0x99, 0x45, 0x0c, 0x91, 0x28, 0x52, 0x7c,
		0x02, 0x92, 0x2c, 0x44, 0x63, 0x86, 0x47, 0x86, 0x63, 0xc0, 0x7b, 0x49, 0x22, 0x38, 0xf1, 0x1e,
		0xc8, 0xe2, 0xff, 0xa9, 0x6f, 0xa4, 0xc9, 0x98, 0x33, 0x58, 0x80, 0xfd, 0x42, 0x9c, 0x82, 0x0c,
		0xd9, 0x26, 0x4d, 0xc4, 0x53, 0x9b, 0xf7, 0x8c, 0x1d, 0xab, 0x89, 0x36, 0x95, 0x8e, 0xee, 0xca,
		0x37, 0x14, 0xbd, 0x83, 0x88, 0xc3, 0x67, 0xa5, 0x3c, 0x13, 0x7e, 0x02, 0xcb, 0xc4, 0x12, 0xe4,
		0xe8, 0xae, 0xd2, 0x8c, 0x26, 0xba, 0x45, 0xa2, 0x67, 0x4a, 0xa2, 0x1b, 0x6d, 0x01, 0x4b, 0x70,
		0xf7, 0xd7, 0x1d, 0xd3, 0xe0, 0xae, 0x49, 0xba, 0xc0, 0x02, 0xd2, 0xfd, 0xa5, 0x70, 0xe0, 0xbe,
		0x77, 0xf0, 0xf4, 0xfa, 0xf6, 0xd2, 0x49, 0x18, 0x23, 0x1a, 0xe7, 0xd8, 0xd2, 0x2b, 0x7a, 0x71,
		0xfc, 0x44, 0x6c, 0x3a, 0x23, 0x15, 0xa8, 0x78, 0x85, 0x49, 0xcb, 0xdf, 0x8c, 0x43, 0x92, 0x04,
		0x96, 0x31, 0xc8, 0xad, 0x3d, 0xdb, 0xa8, 0xcb, 0x73, 0x2b, 0xeb, 0xb5, 0xc5, 0xba, 0x10, 0x13,
		0x0b, 0x00, 0x44, 0x70, 0x65, 0x71, 0xa5, 0xba, 0x26, 0xc4, 0xbd, 0xe7, 0x85, 0xe5, 0xb5, 0x8b,
		0xe7, 0x85, 0x84, 0x07, 0x58, 0xa7, 0x82, 0xa4, 0x5f, 0xe1, 0xdc, 0x59, 0x21, 0x25, 0x0a, 0x90,
		0xa7, 0x04, 0x0b, 0xcf, 0xd4, 0xe7, 0x2e, 0x9e, 0x17, 0xd2, 0x41, 0xc9, 0xb9, 0xb3, 0xc2, 0x88,
		0x38, 0x0a, 0x59, 0x22, 0xa9, 0xad, 0xac, 0x2c, 0x0a, 0x19, 0x8f, 0x73, 0x75, 0x4d, 0x5a, 0x58,
		0x9e, 0x17, 0xb2, 0x1e, 0xe7, 0xbc, 0xb4, 0xb2, 0xde, 0x10, 0xc0, 0x63, 0x58, 0xaa, 0xaf, 0xae,
		0x56, 0xe7, 0xeb, 0x42, 0xce, 0xd3, 0xa8, 0x3d, 0xbb, 0x56, 0x5f, 0x15, 0xf2, 0x81, 0x61, 0x9d,
		0x3b, 0x2b, 0x8c, 0x7a, 0x5d, 0xd4, 0x97, 0xd7, 0x97, 0x84, 0x82, 0x38, 0x0e, 0xa3, 0xb4, 0x0b,
		0x3e, 0x88, 0xb1, 0x90, 0xe8, 0xe2, 0x79, 0x41, 0xe8, 0x0d, 0x84, 0xb2, 0x8c, 0x07, 0x04, 0x17,
		0xcf, 0x0b, 0x62, 0x79, 0x16, 0x52, 0xc4, 0x0d, 0x45, 0x11, 0x0a, 0x8b, 0xd5, 0x5a, 0x7d, 0x51,
		0x5e, 0x69, 0xac, 0x2d, 0xac, 0x2c, 0x57, 0x17, 0x85, 0x58, 0x4f, 0x26, 0xd5, 0x3f, 0xbe, 0xbe,
		0x20, 0xd5, 0xe7, 0x84, 0xb8, 0x5f, 0xd6, 0xa8, 0x57, 0xd7, 0xea, 0x73, 0x42, 0xa2, 0xac, 0xc2,
		0xe4, 0xa0, 0x80, 0x3a, 0x70, 0x0b, 0xf9, 0x7c, 0x21, 0xbe, 0x8f, 0x2f, 0x10, 0xae, 0xb0, 0x2f,
		0x94, 0xdf, 0x8e, 0xc3, 0xc4, 0x80, 0xa4, 0x32, 0xb0, 0x93, 0x27, 0x21, 0x45, 0x7d, 0x99, 0xa6,
		0xd9, 0x87, 0x07, 0x66, 0x27, 0xe2, 0xd9, 0x7d, 0xa9, 0x96, 0xe0, 0xfc, 0xa5, 0x46, 0x62, 0x9f,
		0x52, 0x03, 0x53, 0xf4, 0x39, 0xec, 0x27, 0xfb, 0x82, 0x3f, 0xcd, 0x8f, 0x17, 0x87, 0xc9, 0x8f,
		0x44, 0x76, 0xb0, 0x24, 0x90, 0x1a, 0x90, 0x04, 0x2e, 0xc3, 0x78, 0x1f, 0xd1, 0xd0, 0xc1, 0xf8,
		0x85, 0x18, 0x14, 0xf7, 0x33, 0x4e, 0x44, 0x48, 0x8c, 0x07, 0x42, 0xe2, 0xe5, 0xb0, 0x05, 0xef,
		0xdb, 0x7f, 0x11, 0xfa, 0xd6, 0xfa, 0xf5, 0x18, 0x1c, 0x19, 0x5c, 0x52, 0x0e, 0x1c, 0xc3, 0x13,
		0x90, 0x6e, 0x23, 0x77, 0xcb, 0xe4, 0x65, 0xd5, 0x43, 0x03, 0x92, 0x35, 0x6e, 0x0e, 0x2f, 0x36,
		0x43, 0xf9, 0xb3, 0x7d, 0x62, 0xbf, 0xba, 0x90, 0x8e, 0xa6, 0x6f, 0xa4, 0x9f, 0x89, 0xc3, 0xe1,
		0x81, 0xe4, 0x03, 0x07, 0x7a, 0x2f, 0x80, 0x66, 0x58, 0x1d, 0x97, 0x96, 0x4e, 0x34, 0x12, 0x67,
		0x89, 0x84, 0x04, 0x2f, 0x1c, 0x65, 0x3b, 0xae, 0xd7, 0x9e, 0x20, 0xed, 0x40, 0x45, 0x44, 0xe1,
		0xb1, 0xde, 0x40, 0x93, 0x64, 0xa0, 0xc7, 0xf7, 0x99, 0x69, 0x9f, 0x63, 0x3e, 0x0a, 0x82, 0xaa,
		0x6b, 0xc8, 0x70, 0x65, 0xc7, 0xb5, 0x91, 0xd2, 0xd6, 0x8c, 0x16, 0x49, 0x35, 0x99, 0x4a, 0x6a,
		0x53, 0xd1, 0x1d, 0x24, 0x8d, 0xd1, 0xe6, 0x55, 0xde, 0x8a, 0x11, 0xc4, 0x81, 0x6c, 0x1f, 0x22,
		0x1d, 0x40, 0xd0, 0x66, 0x0f, 0x51, 0xfe, 0x42, 0x16, 0x72, 0xbe, 0x02, 0x5c, 0xbc, 0x0f, 0xf2,
		0xd7, 0x95, 0x1b, 0x8a, 0xcc, 0x0f, 0x55, 0xd4, 0x12, 0x39, 0x2c, 0x6b, 0xb0, 0x83, 0xd5, 0xa3,
		0x30, 0x49, 0x54, 0xcc, 0x8e, 0x8b, 0x6c, 0x59, 0xd5, 0x15, 0xc7, 0x21, 0x46, 0xcb, 0x10, 0x55,
		0x11, 0xb7, 0xad, 0xe0, 0xa6, 0x59, 0xde, 0x22, 0x5e, 0x80, 0x09, 0x82, 0x68, 0x77, 0x74, 0x57,
		0xb3, 0x74, 0x24, 0xe3, 0x63, 0x9e, 0x43, 0x52, 0x8e, 0x37, 0xb2, 0x71, 0xac, 0xb1, 0xc4, 0x14,
		0xf0, 0x88, 0x1c, 0x71, 0x0e, 0xee, 0x25, 0xb0, 0x16, 0x32, 0x90, 0xad, 0xb8, 0x48, 0x46, 0x9f,
		0xea, 0x28, 0xba, 0x23, 0x2b, 0x46, 0x53, 0xde, 0x52, 0x9c, 0xad, 0xe2, 0x24, 0x26, 0xa8, 0xc5,
		0x8b, 0x31, 0xe9, 0x18, 0x56, 0x9c, 0x67, 0x7a, 0x75, 0xa2, 0x56, 0x35, 0x9a, 0x1f, 0x53, 0x9c,
		0x2d, 0xb1, 0x02, 0x47, 0x08, 0x8b, 0xe3, 0xda, 0x9a, 0xd1, 0x92, 0xd5, 0x2d, 0xa4, 0x6e, 0xcb,
		0x1d, 0x77, 0xf3, 0xb1, 0xe2, 0x3d, 0xfe, 0xfe, 0xc9, 0x08, 0x57, 0x89, 0xce, 0x2c, 0x56, 0x59,
		0x77, 0x37, 0x1f, 0x13, 0x57, 0x21, 0x8f, 0x17, 0xa3, 0xad, 0x3d, 0x87, 0xe4, 0x4d, 0xd3, 0x26,
		0x39, 0xb4, 0x30, 0x20, 0x34, 0xf9, 0x2c, 0x38, 0xb3, 0xc2, 0x00, 0x4b, 0x66, 0x13, 0x55, 0x52,
		0xab, 0x8d, 0x7a, 0x7d, 0x4e, 0xca, 0x71, 0x96, 0x2b, 0xa6, 0x8d, 0x1d, 0xaa, 0x65, 0x7a, 0x06,
		0xce, 0x51, 0x87, 0x6a, 0x99, 0xdc, 0xbc, 0x17, 0x60, 0x42, 0x55, 0xe9, 0x9c, 0x35, 0x55, 0x66,
		0x87, 0x31, 0xa7, 0x28, 0x04, 0x8c, 0xa5, 0xaa, 0xf3, 0x54, 0x81, 0xf9, 0xb8, 0x23, 0x3e, 0x0e,
		0x87, 0x7b, 0xc6, 0xf2, 0x03, 0xc7, 0xfb, 0x66, 0x19, 0x86, 0x5e, 0x80, 0x09, 0x6b, 0xa7, 0x1f,
		0x28, 0x06, 0x7a, 0xb4, 0x76, 0xc2, 0xb0, 0x4b, 0x30, 0x69, 0x6d, 0x59, 0xfd, 0xb8, 0x47, 0xfc,
		0x38, 0xd1, 0xda, 0xb2, 0xc2, 0xc0, 0x07, 0xc9, 0xc9, 0xdc, 0x46, 0xaa, 0xe2, 0xa2, 0x66, 0xf1,
		0xa8, 0x5f, 0xdd, 0xd7, 0x20, 0xce, 0x80, 0xa0, 0xaa, 0x32, 0x32, 0x94, 0x0d, 0x1d, 0xc9, 0x8a,
		0x8d, 0x0c, 0xc5, 0x29, 0x96, 0x88, 0x72, 0xd2, 0xb5, 0x3b, 0x48, 0x2a, 0xa8, 0x6a, 0x9d, 0x34,
		0x56, 0x49, 0x9b, 0xf8, 0x08, 0x8c, 0x9b, 0x1b, 0xd7, 0x55, 0xea, 0x91, 0xb2, 0x65, 0xa3, 0x4d,
		0xed, 0x56, 0xf1, 0x01, 0x62, 0xde, 0x31, 0xdc, 0x40, 0xfc, 0xb1, 0x41, 0xc4, 0xe2, 0xc3, 0x20,
		0xa8, 0xce, 0x96, 0x62, 0x5b, 0x24, 0x24, 0x3b, 0x96, 0xa2, 0xa2, 0xe2, 0x83, 0x54, 0x95, 0xca,
		0x97, 0xb9, 0x18, 0xef, 0x08, 0xe7, 0xa6, 0xb6, 0xe9, 0x72, 0xc6, 0x93, 0x74, 0x47, 0x10, 0x19,
		0x63, 0x9b, 0x06, 0x01, 0x5b, 0x22, 0xd0, 0xf1, 0x34, 0x51, 0x2b, 0x58, 0x5b, 0x96, 0xbf, 0xdf,
		0xfb, 0x61, 0x14, 0x6b, 0xf6, 0x3a, 0x7d, 0x98, 0x16, 0x6e, 0xd6, 0x96, 0xaf, 0xc7, 0xf3, 0x70,
		0x04, 0x2b, 0xb5, 0x91, 0xab, 0x34, 0x15, 0x57, 0xf1, 0x69, 0x7f, 0x98, 0x68, 0x63, 0xb3, 0x2f,
		0xb1, 0xc6, 0xc0, 0x38, 0xed, 0xce, 0xc6, 0x8e, 0xe7, 0x58, 0xa7, 0xe9, 0x38, 0xb1, 0x8c, 0xbb,
		0xd6, 0x5d, 0x2b, 0xce, 0xcb, 0x15, 0xc8, 0xfb, 0xfd, 0x5e, 0xcc, 0x02, 0xf5, 0x7c, 0x21, 0x86,
		0x8b, 0xa0, 0xd9, 0x95, 0x39, 0x5c, 0xbe, 0x5c, 0xab, 0x0b, 0x71, 0x5c, 0x46, 0x2d, 0x2e, 0xac,
		0xd5, 0x65, 0x69, 0x7d, 0x79, 0x6d, 0x61, 0xa9, 0x2e, 0x24, 0x7c, 0x85, 0xfd, 0xd5, 0x64, 0xe6,
		0x21, 0xe1, 0x64, 0xf9, 0xcd, 0x38, 0x14, 0x82, 0x27, 0x35, 0xf1, 0x47, 0xe0, 0x28, 0xbf, 0x56,
		0x71, 0x90, 0x2b, 0xdf, 0xd4, 0x6c, 0xb2, 0x21, 0xdb, 0x0a, 0x4d, 0x8e, 0x9e, 0xff, 0x4c, 0x32,
		0xad, 0x55, 0xe4, 0x3e, 0xad, 0xd9, 0x78, 0xbb, 0xb5, 0x15, 0x57, 0x5c, 0x84, 0x92, 0x61, 0xca,
		0x8e, 0xab, 0x18, 0x4d, 0xc5, 0x6e, 0xca, 0xbd, 0x0b, 0x2d, 0x59, 0x51, 0x55, 0xe4, 0x38, 0x26,
		0x4d, 0x84, 0x1e, 0xcb, 0x87, 0x0c, 0x73, 0x95, 0x29, 0xf7, 0x32, 0x44, 0x95, 0xa9, 0x86, 0xdc,
		0x37, 0xb1, 0x9f, 0xfb, 0xde, 0x03, 0xd9, 0xb6, 0x62, 0xc9, 0xc8, 0x70, 0xed, 0x1d, 0x52, 0x9f,
		0x67, 0xa4, 0x4c, 0x5b, 0xb1, 0xea, 0xf8, 0xf9, 0x03, 0x39, 0x26, 0x5d, 0x4d, 0x66, 0x32, 0x42,
		0xf6, 0x6a, 0x32, 0x93, 0x15, 0xa0, 0xfc, 0x56, 0x02, 0xf2, 0xfe, 0x7a, 0x1d, 0x1f, 0x7f, 0x54,
		0x92, 0xb1, 0x62, 0x24, 0xa6, 0xdd, 0x7f, 0xdb, 0xea, 0x7e, 0x66, 0x16, 0xa7, 0xb2, 0x4a, 0x9a,
		0x16, 0xc7, 0x12, 0x45, 0xe2, 0x32, 0x02, 0x3b, 0x1b, 0xa2, 0xc5, 0x48, 0x46, 0x62, 0x4f, 0xe2,
		0x3c, 0xa4, 0xaf, 0x3b, 0x84, 0x3b, 0x4d, 0xb8, 0x1f, 0xb8, 0x3d, 0xf7, 0xd5, 0x55, 0x42, 0x9e,
		0xbd, 0xba, 0x2a, 0x2f, 0xaf, 0x48, 0x4b, 0xd5, 0x45, 0x89, 0xc1, 0xc5, 0x63, 0x90, 0xd4, 0x95,
		0xe7, 0x76, 0x82, 0x49, 0x8f, 0x88, 0x86, 0x5d, 0x84, 0x63, 0x90, 0xbc, 0x89, 0x94, 0xed, 0x60,
		0xaa, 0x21, 0xa2, 0xbb, 0xb8, 0x19, 0xce, 0x40, 0x8a, 0xd8, 0x4b, 0x04, 0x60, 0x16, 0x13, 0x0e,
		0x89, 0x19, 0x48, 0xce, 0xae, 0x48, 0x78, 0x43, 0x08, 0x90, 0xa7, 0x52, 0xb9, 0xb1, 0x50, 0x9f,
		0xad, 0x0b, 0xf1, 0xf2, 0x05, 0x48, 0x53, 0x23, 0xe0, 0xcd, 0xe2, 0x99, 0x41, 0x38, 0xc4, 0x1e,
		0x19, 0x47, 0x8c, 0xb7, 0xae, 0x2f, 0xd5, 0xea, 0x92, 0x10, 0x0f, 0x2e, 0x75, 0x52, 0x48, 0x95,
		0x1d, 0xc8, 0xfb, 0xeb, 0xf0, 0x0f, 0xe6, 0x30, 0xfe, 0x9d, 0x18, 0xe4, 0x7c, 0x75, 0x35, 0x2e,
		0x88, 0x14, 0x5d, 0x37, 0x6f, 0xca, 0x8a, 0xae, 0x29, 0x0e, 0x73, 0x0d, 0x20, 0xa2, 0x2a, 0x96,
		0x0c, 0xbb, 0x74, 0x1f, 0xd0, 0x16, 0x49, 0x09, 0xe9, 0xf2, 0xab, 0x31, 0x10, 0xc2, 0x85, 0x6d,
		0x68, 0x98, 0xb1, 0x1f, 0xe6, 0x30, 0xcb, 0xaf, 0xc4, 0xa0, 0x10, 0xac, 0x66, 0x43, 0xc3, 0xbb,
		0xef, 0x87, 0x3a, 0xbc, 0xef, 0xc5, 0x61, 0x34, 0x50, 0xc3, 0x0e, 0x3b, 0xba, 0x4f, 0xc1, 0xb8,
		0xd6, 0x44, 0x6d, 0xcb, 0x74, 0x91, 0xa1, 0xee, 0xc8, 0x3a, 0xba, 0x81, 0xf4, 0x62, 0x99, 0x04,
		0x8d, 0x33, 0xb7, 0xaf, 0x92, 0x67, 0x16, 0x7a, 0xb8, 0x45, 0x0c, 0xab, 0x4c, 0x2c, 0xcc, 0xd5,
		0x97, 0x1a, 0x2b, 0x6b, 0xf5, 0xe5, 0xd9, 0x67, 0xe5, 0xf5, 0xe5, 0xa7, 0x96, 0x57, 0x9e, 0x5e,
		0x96, 0x04, 0x2d, 0xa4, 0x76, 0x17, 0xb7, 0x7d, 0x03, 0x84, 0xf0, 0xa0, 0xc4, 0xa3, 0x30, 0x68,
		0x58, 0xc2, 0x21, 0x71, 0x02, 0xc6, 0x96, 0x57, 0xe4, 0xd5, 0x85, 0xb9, 0xba, 0x5c, 0xbf, 0x72,
		0xa5, 0x3e, 0xbb, 0xb6, 0x4a, 0xef, 0x3d, 0x3c, 0xed, 0xb5, 0xc0, 0x06, 0x2f, 0xbf, 0x9c, 0x80,
		0x89, 0x01, 0x23, 0x11, 0xab, 0xec, 0xc4, 0x42, 0x0f, 0x51, 0xa7, 0x87, 0x19, 0xfd, 0x0c, 0xae,
		0x19, 0x1a, 0x8a, 0xed, 0xb2, 0x03, 0xce, 0xc3, 0x80, 0xad, 0x64, 0xb8, 0xda, 0xa6, 0x86, 0x6c,
		0x76, 0x9f, 0x44, 0x8f, 0x31, 0x63, 0x3d, 0x39, 0xbd, 0x52, 0xfa, 0x30, 0x88, 0x96, 0xe9, 0x68,
		0xae, 0x76, 0x03, 0xc9, 0x9a, 0xc1, 0x2f, 0x9f, 0xf0, 0xb1, 0x26, 0x29, 0x09, 0xbc, 0x65, 0xc1,
		0x70, 0x3d, 0x6d, 0x03, 0xb5, 0x94, 0x90, 0x36, 0x0e, 0xe6, 0x09, 0x49, 0xe0, 0x2d, 0x9e, 0xf6,
		0x7d, 0x90, 0x6f, 0x9a, 0x1d, 0x5c, 0xeb, 0x51, 0x3d, 0x9c, 0x3b, 0x62, 0x52, 0x8e, 0xca, 0x3c,
		0x15, 0x56, 0xc5, 0xf7, 0x6e, 0xbd, 0xf2, 0x52, 0x8e, 0xca, 0xa8, 0xca, 0x49, 0x18, 0x53, 0x5a,
		0x2d, 0x1b, 0x93, 0x73, 0x22, 0x7a, 0x2e, 0x29, 0x78, 0x62, 0xa2, 0x38, 0x75, 0x15, 0x32, 0xdc,
		0x0e, 0x38, 0x55, 0x63, 0x4b, 0xc8, 0x16, 0x3d, 0x6c, 0xc7, 0xa7, 0xb3, 0x52, 0xc6, 0xe0, 0x8d,
		0xf7, 0x41, 0x5e, 0x73, 0xe4, 0xde, 0x25, 0x7e, 0xfc, 0x44, 0x7c, 0x3a, 0x23, 0xe5, 0x34, 0xc7,
		0xbb, 0x00, 0x2d, 0xbf, 0x1e, 0x87, 0x42, 0xf0, 0x25, 0x84, 0x38, 0x07, 0x19, 0xdd, 0x54, 0x15,
		0xe2, 0x5a, 0xf4, 0x0d, 0xd8, 0x74, 0xc4, 0x7b, 0x8b, 0x99, 0x45, 0xa6, 0x2f, 0x79, 0xc8, 0xa9,
		0xbf, 0x8b, 0x41, 0x86, 0x8b, 0xc5, 0x23, 0x90, 0xb4, 0x14, 0x77, 0x8b, 0xd0, 0xa5, 0x6a, 0x71,
		0x21, 0x26, 0x91, 0x67, 0x2c, 0x77, 0x2c, 0xc5, 0x20, 0x2e, 0xc0, 0xe4, 0xf8, 0x19, 0xaf, 0xab,
		0x8e, 0x94, 0x26, 0x39, 0xf4, 0x98, 0xed, 0x36, 0x32, 0x5c, 0x87, 0xaf, 0x2b, 0x93, 0xcf, 0x32,
		0xb1, 0x78, 0x0a, 0xc6, 0x5d, 0x5b, 0xd1, 0xf4, 0x80, 0x6e, 0x92, 0xe8, 0x0a, 0xbc, 0xc1, 0x53,
		0xae, 0xc0, 0x31, 0xce, 0xdb, 0x44, 0xae, 0xa2, 0x6e, 0xa1, 0x66, 0x0f, 0x94, 0x26, 0x97, 0x1b,
		0x47, 0x99, 0xc2, 0x1c, 0x6b, 0xe7, 0xd8, 0xf2, 0x9b, 0x31, 0x18, 0xe7, 0xc7, 0xb4, 0xa6, 0x67,
		0xac, 0x25, 0x00, 0xc5, 0x30, 0x4c, 0xd7, 0x6f, 0xae, 0x7e, 0x57, 0xee, 0xc3, 0xcd, 0x54, 0x3d,
		0x90, 0xe4, 0x23, 0x98, 0x6a, 0x03, 0xf4, 0x5a, 0xf6, 0x35, 0x5b, 0x09, 0x72, 0xec, 0x0d, 0x13,
		0x79, 0x4d, 0x49, 0x0f, 0xf6, 0x40, 0x45, 0xf8, 0x3c, 0x27, 0x4e, 0x42, 0x6a, 0x03, 0xb5, 0x34,
		0x83, 0xdd, 0x1b, 0xd3, 0x07, 0x7e, 0xfd, 0x92, 0xf4, 0xae, 0x5f, 0x6a, 0x9f, 0x8f, 0xc1, 0x84,
		0x6a, 0xb6, 0xc3, 0xe3, 0xad, 0x09, 0xa1, 0xdb, 0x05, 0xe7, 0x63, 0xb1, 0x6b, 0x4f, 0xb4, 0x34,
		0x77, 0xab, 0xb3, 0x31, 0xa3, 0x9a, 0xed, 0x33, 0x2d, 0x53, 0x57, 0x8c, 0x56, 0xef, 0x3d, 0x2b,
		0xf9, 0xa1, 0x9e, 0x6e, 0x21, 0xe3, 0x74, 0xcb, 0xf4, 0xbd, 0x75, 0xbd, 0xdc, 0xfb, 0xf9, 0x3f,
		0xb1, 0xd8, 0xd7, 0xe2, 0x89, 0xf9, 0x46, 0xed, 0xeb, 0xf1, 0xa9, 0x79, 0xda, 0x5d, 0x83, 0x9b,
		0x47, 0x42, 0x9b, 0x3a, 0x52, 0xf1, 0x94, 0x61, 0xf7, 0x14, 0x4c, 0xb6, 0xcc, 0x96, 0x49, 0x18,
		0xcf, 0xe0, 0x5f, 0xec, 0xcd, 0x6d, 0xd6, 0x93, 0x4e, 0x45, 0xbe, 0xe6, 0xad, 0x2c, 0xc3, 0x04,
		0x53, 0x96, 0xc9, 0xab, 0x23, 0x7a, 0xb0, 0x11, 0x6f, 0x7b, 0xab, 0x56, 0xfc, 0xc6, 0x3b, 0x24,
		0xa1, 0x4b, 0xe3, 0x0c, 0x8a, 0xdb, 0xe8, 0xd9, 0xa7, 0x22, 0xc1, 0xe1, 0x00, 0x1f, 0xdd, 0xb6,
		0xc8, 0x8e, 0x60, 0xfc, 0x2b, 0xc6, 0x38, 0xe1, 0x63, 0x5c, 0x65, 0xd0, 0xca, 0x2c, 0x8c, 0x1e,
		0x84, 0xeb, 0xaf, 0x19, 0x57, 0x1e, 0xf9, 0x49, 0xe6, 0x61, 0x8c, 0x90, 0xa8, 0x1d, 0xc7, 0x35,
		0xdb, 0x24, 0x26, 0xde, 0x9e, 0xe6, 0x6f, 0xde, 0xa1, 0xfb, 0xa8, 0x80, 0x61, 0xb3, 0x1e, 0xaa,
		0x52, 0x01, 0xf2, 0xb6, 0xac, 0x89, 0x54, 0x3d, 0x82, 0xe1, 0x0d, 0x36, 0x10, 0x4f, 0xbf, 0xf2,
		0x09, 0x98, 0xc4, 0xbf, 0x49, 0xc8, 0xf2, 0x8f, 0x24, 0xfa, 0x0a, 0xae, 0xf8, 0xe6, 0x0b, 0x74,
		0xab, 0x4e, 0x78, 0x04, 0xbe, 0x31, 0xf9, 0x56, 0xb1, 0x85, 0x5c, 0x17, 0xd9, 0x8e, 0xac, 0xe8,
		0x83, 0x86, 0xe7, 0xbb, 0xc3, 0x28, 0x7e, 0xf9, 0xdd, 0xe0, 0x2a, 0xce, 0x53, 0x64, 0x55, 0xd7,
		0x2b, 0xeb, 0x70, 0x74, 0x80, 0x57, 0x0c, 0xc1, 0xf9, 0x32, 0xe3, 0x9c, 0xec, 0xf3, 0x0c, 0x4c,
		0xdb, 0x00, 0x2e, 0xf7, 0xd6, 0x72, 0x08, 0xce, 0x5f, 0x61, 0x9c, 0x22, 0xc3, 0xf2, 0x25, 0xc5,
		0x8c, 0x57, 0x61, 0xfc, 0x06, 0xb2, 0x37, 0x4c, 0x87, 0xdd, 0x1b, 0x0d, 0x41, 0xf7, 0x0a, 0xa3,
		0x1b, 0x63, 0x40, 0x72, 0x91, 0x84, 0xb9, 0x1e, 0x87, 0xcc, 0xa6, 0xa2, 0xa2, 0x21, 0x28, 0xbe,
		0xc2, 0x28, 0x46, 0xb0, 0x3e, 0x86, 0x56, 0x21, 0xdf, 0x32, 0x59, 0xd6, 0x8a, 0x86, 0xbf, 0xca,
		0xe0, 0x39, 0x8e, 0x61, 0x14, 0x96, 0x69, 0x75, 0x74, 0x9c, 0xd2, 0xa2, 0x29, 0x7e, 0x95, 0x53,
		0x70, 0x0c, 0xa3, 0x38, 0x80, 0x59, 0x5f, 0xe3, 0x14, 0x8e, 0xcf, 0x9e, 0x4f, 0x42, 0xce, 0x34,
		0xf4, 0x1d, 0xd3, 0x18, 0x66, 0x10, 0x5f, 0x65, 0x0c, 0xc0, 0x20, 0x98, 0xe0, 0x32, 0x64, 0x87,
		0x5d, 0x88, 0x5f, 0x7f, 0x97, 0x6f, 0x0f, 0xbe, 0x02, 0xf3, 0x30, 0xc6, 0x03, 0x94, 0x66, 0x1a,
		0x43, 0x50, 0xfc, 0x06, 0xa3, 0x28, 0xf8, 0x60, 0x6c, 0x1a, 0x2e, 0x72, 0xdc, 0x16, 0x1a, 0x86,
		0xe4, 0x75, 0x3e, 0x0d, 0x06, 0x61, 0xa6, 0xdc, 0x40, 0x86, 0xba, 0x35, 0x1c, 0xc3, 0x6f, 0x72,
		0x53, 0x72, 0x0c, 0xa6, 0x98, 0x85, 0xd1, 0xb6, 0x62, 0x3b, 0x5b, 0x8a, 0x3e, 0xd4, 0x72, 0xfc,
		0x16, 0xe3, 0xc8, 0x7b, 0x20, 0x66, 0x91, 0x8e, 0x71, 0x10, 0x9a, 0xaf, 0x73, 0x8b, 0xf8, 0x60,
		0x6c, 0xeb, 0x39, 0x2e, 0xb9, 0x64, 0x3b, 0x08, 0xdb, 0x6f, 0xf3, 0xad, 0x47, 0xb1, 0x4b, 0x7e,
		0xc6, 0xcb, 0x90, 0x75, 0xb4, 0xe7, 0x86, 0xa2, 0xf9, 0x1d, 0xbe, 0xd2, 0x04, 0x80, 0xc1, 0xcf,
		0xc2, 0xb1, 0x81, 0x69, 0x62, 0x08, 0xb2, 0xdf, 0x65, 0x64, 0x47, 0x06, 0xa4, 0x0a, 0x16, 0x12,
		0x0e, 0x4a, 0xf9, 0x7b, 0x3c, 0x24, 0xa0, 0x10, 0x57, 0x03, 0x9f, 0x23, 0x1c, 0x65, 0xf3, 0x60,
		0x56, 0xfb, 0x7d, 0x6e, 0x35, 0x8a, 0x0d, 0x58, 0x6d, 0x0d, 0x8e, 0x30, 0xc6, 0x83, 0xad, 0xeb,
		0x1f, 0xf0, 0xc0, 0x4a, 0xd1, 0xeb, 0xc1, 0xd5, 0xfd, 0x31, 0x98, 0xf2, 0xcc, 0xc9, 0x0b, 0x56,
		0x47, 0x6e, 0x2b, 0xd6, 0x10, 0xcc, 0xdf, 0x60, 0xcc, 0x3c, 0xe2, 0x7b, 0x15, 0xaf, 0xb3, 0xa4,
		0x58, 0x98, 0xfc, 0x19, 0x28, 0x72, 0xf2, 0x8e, 0x61, 0x23, 0xd5, 0x6c, 0x19, 0xda, 0x73, 0xa8,
		0x39, 0x04, 0xf5, 0x1f, 0x86, 0x96, 0x6a, 0xdd, 0x07, 0xc7, 0xcc, 0x0b, 0x20, 0x78, 0xb5, 0x8a,
		0xac, 0xb5, 0x2d, 0xd3, 0x76, 0x23, 0x18, 0xff, 0x88, 0xaf, 0x94, 0x87, 0x5b, 0x20, 0xb0, 0x4a,
		0x1d, 0xe8, 0x9b, 0xe7, 0x61, 0x5d, 0xf2, 0x8f, 0x19, 0xd1, 0x68, 0x0f, 0xc5, 0x02, 0x87, 0x6a,
		0xb6, 0x2d, 0xc5, 0x1e, 0x26, 0xfe, 0xfd, 0x09, 0x0f, 0x1c, 0x0c, 0xc2, 0x02, 0x87, 0xbb, 0x63,
		0x21, 0x9c, 0xed, 0x87, 0x60, 0xf8, 0x26, 0x0f, 0x1c, 0x1c, 0xc3, 0x28, 0x78, 0xc1, 0x30, 0x04,
		0xc5, 0x9f, 0x72, 0x0a, 0x8e, 0xc1, 0x14, 0x1f, 0xef, 0x25, 0x5a, 0x1b, 0xb5, 0x34, 0xc7, 0xb5,
		0x69, 0x99, 0x7c, 0x7b, 0xaa, 0x3f, 0x7b, 0x37, 0x58, 0x84, 0x49, 0x3e, 0x28, 0x8e, 0x44, 0xec,
		0xda, 0x95, 0x9c, 0xa2, 0xa2, 0x07, 0xf6, 0x2d, 0x1e, 0x89, 0x7c, 0x30, 0x3c, 0x36, 0x5f, 0x85,
		0x88, 0xcd, 0xae, 0xe2, 0xb3, 0xc3, 0x10, 0x74, 0x7f, 0x1e, 0x1a, 0xdc, 0x2a, 0xc7, 0x62, 0x4e,
		0x5f, 0xfd, 0xd3, 0x31, 0xb6, 0xd1, 0xce, 0x50, 0xde, 0xf9, 0xed, 0x50, 0xfd, 0xb3, 0x4e, 0x91,
		0x34, 0x86, 0x8c, 0x85, 0xea, 0x29, 0x31, 0xea, 0x3b, 0xa3, 0xe2, 0x4f, 0xbe, 0xc7, 0xe6, 0x1b,
		0x2c, 0xa7, 0x2a, 0x8b, 0xd8, 0xc9, 0x83, 0x45, 0x4f, 0x34, 0xd9, 0x0b, 0xef, 0x79, 0x7e, 0x1e,
		0xa8, 0x79, 0x2a, 0x57, 0x60, 0x34, 0x50, 0xf0, 0x44, 0x53, 0xfd, 0x14, 0xa3, 0xca, 0xfb, 0xeb,
		0x9d, 0xca, 0x05, 0x48, 0xe2, 0xe2, 0x25, 0x1a, 0xfe, 0xd3, 0x0c, 0x4e, 0xd4, 0x2b, 0x1f, 0x85,
		0x0c, 0x2f, 0x5a, 0xa2, 0xa1, 0x3f, 0xc3, 0xa0, 0x1e, 0x04, 0xc3, 0x79, 0xc1, 0x12, 0x0d, 0xff,
		0x59, 0x0e, 0xe7, 0x10, 0x0c, 0x1f, 0xde, 0x84, 0xdf, 0xf9, 0x6c, 0x92, 0x25, 0x1d, 0x6e, 0xbb,
		0xcb, 0x30, 0xc2, 0x2a, 0x95, 0x68, 0xf4, 0x67, 0x58, 0xe7, 0x1c, 0x51, 0xb9, 0x04, 0xa9, 0x21,
		0x0d, 0xfe, 0xf3, 0x0c, 0x4a, 0xf5, 0x2b, 0xb3, 0x90, 0xf3, 0x55, 0x27, 0xd1, 0xf0, 0x5f, 0x60,
		0x70, 0x3f, 0x0a, 0x0f, 0x9d, 0x55, 0x27, 0xd1, 0x04, 0x9f, 0xe7, 0x43, 0x67, 0x08, 0x6c, 0x36,
		0x5e, 0x98, 0x44, 0xa3, 0x5f, 0xe4, 0x56, 0xe7, 0x90, 0xca, 0x93, 0x90, 0xf5, 0x92, 0x4d, 0x34,
		0xfe, 0x0b, 0x0c, 0xdf, 0xc3, 0x60, 0x0b, 0xf8, 0x92, 0x5d, 0x34, 0xc5, 0x2f, 0x72, 0x0b, 0xf8,
		0x50, 0x78, 0x1b, 0x85, 0x0b, 0x98, 0x68, 0xa6, 0x2f, 0xf2, 0x6d, 0x14, 0xaa, 0x5f, 0xf0, 0x6a,
		0x92, 0x98, 0x1f, 0x4d, 0xf1, 0x25, 0xbe, 0x9a, 0x44, 0x1f, 0x0f, 0x23, 0x5c, 0x11, 0x44, 0x73,
		0xfc, 0x32, 0x1f, 0x46, 0xa8, 0x20, 0xa8, 0x34, 0x40, 0xec, 0xaf, 0x06, 0xa2, 0xf9, 0x5e, 0x62,
		0x7c, 0xe3, 0x7d, 0xc5, 0x40, 0xe5, 0x69, 0x38, 0x32, 0xb8, 0x12, 0x88, 0x66, 0xfd, 0xf2, 0x7b,
		0xa1, 0xb3, 0x9b, 0xbf, 0x10, 0xa8, 0xac, 0xf5, 0x52, 0x8a, 0xbf, 0x0a, 0x88, 0xa6, 0x7d, 0xf9,
		0xbd, 0x60, 0xe0, 0xf6, 0x17, 0x01, 0x95, 0x2a, 0x40, 0x2f, 0x01, 0x47, 0x73, 0xbd, 0xc2, 0xb8,
		0x7c, 0x20, 0xbc, 0x35, 0x58, 0xfe, 0x8d, 0xc6, 0x7f, 0x85, 0x6f, 0x0d, 0x86, 0xc0, 0x5b, 0x83,
		0xa7, 0xde, 0x68, 0xf4, 0xab, 0x7c, 0x6b, 0x70, 0x08, 0xf6, 0x6c, 0x5f, 0x76, 0x8b, 0x66, 0xf8,
		0x2a, 0xf7, 0x6c, 0x1f, 0xaa, 0xb2, 0x0c, 0xe3, 0x7d, 0x09, 0x31, 0x9a, 0xea, 0x6b, 0x8c, 0x4a,
		0x08, 0xe7, 0x43, 0x7f, 0xf2, 0x62, 0xc9, 0x30, 0x9a, 0xed, 0xd7, 0x42, 0xc9, 0x8b, 0xe5, 0xc2,
		0xca, 0x65, 0xc8, 0x18, 0x1d, 0x5d, 0xc7, 0x9b, 0x47, 0xbc, 0xfd, 0xb7, 0x81, 0xc5, 0x7f, 0x79,
		0x9f, 0x59, 0x87, 0x03, 0x2a, 0x17, 0x20, 0x85, 0xda, 0x1b, 0xa8, 0x19, 0x85, 0xdc, 0x7d, 0x9f,
		0x07, 0x4c, 0xac, 0x5d, 0x79, 0x12, 0x80, 0x5e, 0x8d, 0x90, 0xd7, 0x83, 0x11, 0xd8, 0x7f, 0x7d,
		0x9f, 0x7d, 0x8c, 0xd3, 0x83, 0xf4, 0x08, 0xe8, 0xa7, 0x3d, 0xb7, 0x27, 0x78, 0x37, 0x48, 0x40,
		0x56, 0xe4, 0x71, 0x18, 0xb9, 0xee, 0x98, 0x86, 0xab, 0xb4, 0xa2, 0xd0, 0xff, 0xc6, 0xd0, 0x5c,
		0x1f, 0x1b, 0xac, 0x6d, 0xda, 0xc8, 0x55, 0x5a, 0x4e, 0x14, 0xf6, 0xdf, 0x19, 0xd6, 0x03, 0x60,
		0xb0, 0xaa, 0x38, 0xee, 0x30, 0xf3, 0xfe, 0x0f, 0x0e, 0xe6, 0x00, 0x3c, 0x68, 0xfc, 0x7b, 0x1b,
		0xed, 0x44, 0x61, 0x7f, 0xc0, 0x07, 0xcd, 0xf4, 0x2b, 0x1f, 0x85, 0x2c, 0xfe, 0x49, 0xbf, 0xb0,
		0x8b, 0x00, 0xff, 0x27, 0x03, 0xf7, 0x10, 0xb8, 0x67, 0xc7, 0x6d, 0xba, 0x5a, 0xb4, 0xb1, 0xf7,
		0xd8, 0x4a, 0x73, 0xfd, 0x4a, 0x15, 0x72, 0x8e, 0xdb, 0x6c, 0x76, 0x58, 0x7d, 0x1a, 0x01, 0xff,
		0xaf, 0xf7, 0xbd, 0x2b, 0x0b, 0x0f, 0x83, 0x57, 0xfb, 0xe6, 0xb6, 0x6b, 0x99, 0xe4, 0x15, 0x48,
		0x14, 0xc3, 0x7b, 0x8c, 0xc1, 0x07, 0xa9, 0xcc, 0x42, 0x1e, 0xcf, 0xc5, 0x46, 0x16, 0x22, 0xef,
		0xab, 0x22, 0x28, 0xfe, 0x9b, 0x19, 0x20, 0x00, 0xaa, 0x7d, 0xf2, 0x8d, 0xb7, 0x8e, 0xc7, 0xbe,
		0xfb, 0xd6, 0xf1, 0xd8, 0xf7, 0xde, 0x3a, 0x1e, 0x7b, 0xf1, 0xed, 0xe3, 0x87, 0xbe, 0xfb, 0xf6,
		0xf1, 0x43, 0xff, 0xf0, 0xf6, 0xf1, 0x43, 0x83, 0xaf, 0x8d, 0x61, 0xde, 0x9c, 0x37, 0xe9, 0x85,
		0xf1, 0xb5, 0x72, 0xe0, 0xba, 0xb8, 0x65, 0xf6, 0x6e, 0x6b, 0xbd, 0x43, 0x0e, 0xbc, 0x18, 0x87,
		0x52, 0xf8, 0x2e, 0x17, 0x1b, 0xd0, 0x71, 0x95, 0xb6, 0xb5, 0xdf, 0x5f, 0xec, 0x5c, 0x86, 0xec,
		0x1a, 0xd7, 0x11, 0x8b, 0x30, 0xe2, 0x20, 0xd5, 0x34, 0x9a, 0x0e, 0x79, 0xcd, 0x99, 0x90, 0xf8,
		0xa3, 0x38, 0x09, 0x29, 0x43, 0x31, 0x4c, 0x87, 0x7d, 0x27, 0x48, 0x1f, 0x6a, 0xbf, 0x14, 0x3b,
		0xd8, 0x8c, 0x0a, 0x5e, 0x57, 0x64, 0x5a, 0x8d, 0xd8, 0xb5, 0x53, 0xb7, 0xbb, 0x06, 0xc7, 0x2e,
		0xeb, 0xf4, 0xa6, 0xe0, 0xbb, 0xf3, 0x3e, 0x1e, 0xbe, 0xf3, 0x7e, 0x1a, 0xe9, 0xfa, 0x53, 0x86,
		0x79, 0xd3, 0x58, 0xc3, 0x98, 0x8d, 0x34, 0xfd, 0xc2, 0x18, 0xfe, 0x3e, 0x0b, 0xe3, 0xb7, 0xce,
		0x28, 0x96, 0xe5, 0x90, 0x7f, 0x98, 0x11, 0xd2, 0xb7, 0x66, 0xf0, 0xd3, 0xd4, 0xc0, 0xab, 0xf1,
		0xa9, 0x28, 0x1b, 0x96, 0xbf, 0x9d, 0x86, 0xc9, 0xaa, 0x65, 0xe9, 0x1a, 0x7d, 0x1d, 0x53, 0x37,
		0x54, 0xb3, 0x49, 0x82, 0x9f, 0x0e, 0x23, 0x4a, 0xb3, 0x69, 0x23, 0x87, 0x9a, 0x2f, 0x5f, 0x93,
		0x76, 0xbb, 0x25, 0x2e, 0xda, 0xeb, 0x96, 0x0a, 0x3b, 0x4a, 0x5b, 0xaf, 0x94, 0x99, 0xa0, 0xfc,
		0xbf, 0xdd, 0xd2, 0x47, 0x7c, 0xd3, 0xb7, 0xcc, 0x6d, 0xf7, 0xb4, 0x81, 0xdc, 0x9b, 0xa6, 0xbd,
		0x7d, 0xc6, 0x32, 0xd5, 0x6d, 0xe4, 0x9e, 0x56, 0x4d, 0x1b, 0x9d, 0x21, 0x66, 0x98, 0xa9, 0x52,
		0x94, 0xc4, 0xf9, 0xc4, 0x1a, 0x00, 0xfb, 0xb3, 0xa5, 0x6d, 0xb4, 0x43, 0xdf, 0x5a, 0xd4, 0xee,
		0xdf, 0xed, 0x96, 0x7c, 0xd2, 0xbd, 0x6e, 0x69, 0x9c, 0xf6, 0xd9, 0x93, 0x95, 0xa5, 0x2c, 0x7d,
		0x78, 0x0a, 0xed, 0x88, 0x97, 0x20, 0x7d, 0x5d, 0xd1, 0x74, 0xfe, 0xf6, 0xbd, 0x56, 0xea, 0xc3,
		0x8f, 0x52, 0x3c, 0xd5, 0x2a, 0x4b, 0x4c, 0x5d, 0xd4, 0x21, 0xed, 0xb8, 0x8a, 0xdb, 0xa1, 0x2f,
		0x87, 0x52, 0xb5, 0xb5, 0xdd, 0x6e, 0x89, 0x49, 0x7a, 0x20, 0xfa, 0x8c, 0xe7, 0x79, 0x61, 0xf8,
		0x79, 0xae, 0xba, 0xca, 0x36, 0x5a, 0x25, 0x48, 0x89, 0x31, 0x8a, 0xe7, 0x20, 0xad, 0x6e, 0x29,
		0x9a, 0xe1, 0xd0, 0x4f, 0x66, 0x6b, 0xf7, 0xe0, 0xde, 0xa8, 0xa4, 0xd7, 0x1b, 0x7d, 0x2e, 0x4b,
		0xac, 0x41, 0x7c, 0x21, 0x06, 0xa3, 0x0e, 0x26, 0x6b, 0xca, 0xae, 0xb9, 0x8d, 0x0c, 0x87, 0x7e,
		0x58, 0x5f, 0xfb, 0xf1, 0x37, 0xba, 0xa5, 0x43, 0xff, 0xd8, 0x2d, 0x9d, 0x1e, 0x7e, 0x4c, 0x0b,
		0x86, 0xbb, 0xdb, 0x2d, 0x05, 0xd9, 0xf6, 0xba, 0xa5, 0x49, 0x6f, 0x9a, 0x3d, 0x71, 0x59, 0xca,
		0xd3, 0xe7, 0x35, 0xf2, 0x28, 0xde, 0x04, 0x68, 0x2b, 0xb7, 0x64, 0x1b, 0xe9, 0xca, 0x0e, 0xfd,
		0x73, 0x94, 0x6c, 0xed, 0x99, 0x3b, 0x1d, 0x81, 0x8f, 0xaa, 0xb7, 0xb4, 0x3d, 0x59, 0x19, 0x17,
		0xd4, 0xb7, 0x24, 0xf2, 0x5b, 0xfc, 0x6c, 0x0c, 0x8e, 0x75, 0x0c, 0x3c, 0x16, 0xf6, 0x2e, 0xcf,
		0xd2, 0x11, 0xb9, 0x31, 0xc5, 0xee, 0xcc, 0xbe, 0xe4, 0x9f, 0xea, 0x8b, 0x62, 0xde, 0x06, 0xad,
		0x9d, 0xc3, 0x83, 0xdc, 0xed, 0x96, 0x0a, 0x3d, 0x12, 0x8c, 0xdc, 0xeb, 0x96, 0x0e, 0xd3, 0x7e,
		0x83, 0xf2, 0xf2, 0x8b, 0xff, 0x54, 0x8a, 0x49, 0x47, 0x3d, 0xe1, 0xac, 0xd7, 0x21, 0xa6, 0xac,
		0x64, 0x3e, 0xfd, 0x5a, 0xe9, 0xd0, 0xf7, 0x5f, 0x2b, 0xc5, 0xca, 0x32, 0x24, 0x1b, 0xa6, 0xa9,
		0x8b, 0x4b, 0x90, 0x66, 0xcb, 0x42, 0xbe, 0x2c, 0xad, 0x5d, 0xb8, 0x23, 0xa3, 0x48, 0x8c, 0xa4,
		0x92, 0xc1, 0xe4, 0x3f, 0xc0, 0x1d, 0x7c, 0x2e, 0x06, 0x87, 0x1b, 0x36, 0xba, 0x81, 0x7d, 0x08,
		0x35, 0xcc, 0x9b, 0xc8, 0x5e, 0x52, 0x2c, 0x0b, 0x1f, 0x46, 0x57, 0xc2, 0xfb, 0xf3, 0xc2, 0xff,
		0x73, 0x0b, 0x4e, 0x42, 0xca, 0xc2, 0x1d, 0x90, 0xdd, 0x97, 0x90, 0xe8, 0x43, 0x25, 0x8f, 0xe7,
		0xfa, 0xd2, 0x6b, 0xa5, 0x18, 0x1e, 0x52, 0xed, 0xea, 0x7e, 0x21, 0xf2, 0xda, 0xa3, 0xc3, 0xf4,
		0xcc, 0xa2, 0x97, 0x1b, 0x08, 0x6b, 0x9f, 0x8b, 0xc3, 0xf1, 0xbe, 0xb7, 0x76, 0x2c, 0xd7, 0xed,
		0x17, 0xe8, 0x2b, 0x90, 0x99, 0xe3, 0x29, 0xf4, 0xa0, 0x71, 0xfe, 0x4b, 0x07, 0x8c, 0xf3, 0xa3,
		0xbc, 0x27, 0x1e, 0xe6, 0x1f, 0x89, 0x0e, 0xf3, 0x7c, 0xfc, 0x77, 0x10, 0xe5, 0x3f, 0x9d, 0x85,
		0x49, 0x66, 0xa7, 0x16, 0x32, 0x90, 0xa3, 0x0d, 0x17, 0xe8, 0x23, 0x4c, 0x38, 0xd5, 0x9f, 0x39,
		0xca, 0x7f, 0x9b, 0x82, 0x74, 0x43, 0xb1, 0x95, 0xb6, 0x23, 0x76, 0x20, 0xb4, 0x33, 0x88, 0x29,
		0x73, 0x67, 0x8f, 0xf5, 0xff, 0xa5, 0x18, 0xa3, 0x3d, 0xf0, 0x96, 0x7a, 0x09, 0x6f, 0xa9, 0x51,
		0x4f, 0x88, 0x37, 0x92, 0x78, 0x0d, 0x04, 0xbc, 0xe1, 0x95, 0x5e, 0xfe, 0xa1, 0x6b, 0x95, 0xa8,
		0x9d, 0xd9, 0xed, 0x96, 0xfa, 0xda, 0xf6, 0xba, 0xa5, 0xa3, 0xbd, 0x30, 0xe1, 0x6f, 0x29, 0x4b,
		0x63, 0x6d, 0xe5, 0x96, 0x2f, 0x8f, 0x39, 0xe2, 0x3a, 0x8c, 0x2a, 0x96, 0x25, 0x93, 0xf8, 0x25,
		0xb7, 0xd9, 0xfb, 0xee, 0x44, 0xed, 0x23, 0xbb, 0xdd, 0xd2, 0x78, 0xa0, 0x41, 0x6b, 0x77, 0xda,
		0x7b, 0xdd, 0x52, 0x91, 0xe5, 0xb3, 0x70, 0x53, 0x59, 0xca, 0x29, 0x96, 0x45, 0x02, 0xf9, 0x92,
		0x66, 0x88, 0x2d, 0x98, 0xd8, 0x50, 0x1c, 0xc4, 0x82, 0x94, 0x6c, 0x21, 0xbb, 0xb1, 0xf2, 0xd4,
		0x1a, 0x49, 0x1c, 0x89, 0xda, 0xa5, 0xdd, 0x6e, 0x69, 0x32, 0xd4, 0x2c, 0xe3, 0xdd, 0xb0, 0xd7,
		0x2d, 0xdd, 0x43, 0xf9, 0x07, 0xb5, 0x96, 0xa5, 0x71, 0x2c, 0xa6, 0xb1, 0xae, 0x41, 0x19, 0xc5,
		0xeb, 0xf4, 0xfd, 0x85, 0xa6, 0x6b, 0xee, 0x8e, 0xac, 0x34, 0xaf, 0x77, 0x1c, 0xb7, 0x8d, 0x0c,
		0x97, 0x7e, 0x68, 0x42, 0x7b, 0x1a, 0xd4, 0xde, 0xeb, 0x69, 0x50, 0x6b, 0x59, 0x9a, 0xf0, 0xc4,
		0x55, 0x4f, 0x2a, 0xb6, 0xe1, 0xb0, 0xa5, 0xd8, 0xae, 0xa6, 0x6a, 0x16, 0xb1, 0x9e, 0x4c, 0xbe,
		0x4b, 0x27, 0x7f, 0xda, 0x89, 0x13, 0xe9, 0xe3, 0xbb, 0xdd, 0xd2, 0x60, 0x85, 0xbd, 0x6e, 0xe9,
		0x43, 0x2c, 0x27, 0x0f, 0x6a, 0x2e, 0x4b, 0x13, 0x01, 0xb9, 0xa4, 0xb8, 0x68, 0xc5, 0x10, 0xaf,
		0xd2, 0x34, 0xc2, 0xb2, 0xe0, 0x08, 0x99, 0xd0, 0x29, 0xec, 0x4a, 0x6d, 0xe5, 0x16, 0x36, 0xb9,
		0xec, 0x65, 0xc3, 0xc3, 0xde, 0x72, 0xfb, 0xe4, 0x34, 0x33, 0xcc, 0x92, 0xdf, 0x95, 0xcc, 0x4b,
		0x3c, 0x16, 0xbf, 0x1f, 0x83, 0xfc, 0x3c, 0xdd, 0x31, 0x24, 0x5a, 0x8a, 0xb3, 0x90, 0xb6, 0x88,
		0x7b, 0x33, 0x67, 0x2e, 0xcc, 0xd0, 0x1d, 0x34, 0x43, 0x9d, 0x9e, 0x26, 0x5e, 0xaa, 0xd1, 0x4b,
		0xbc, 0xf4, 0xb9, 0x2c, 0xb1, 0x06, 0x51, 0x83, 0x7c, 0xc8, 0x3d, 0x13, 0xe4, 0x6f, 0x70, 0x18,
		0xd5, 0xa0, 0xd2, 0xa9, 0x76, 0x72, 0xb7, 0x5b, 0xca, 0x87, 0x1c, 0x77, 0xc2, 0x73, 0x2f, 0x9f,
		0xd3, 0x06, 0x94, 0xc4, 0xcb, 0x90, 0x41, 0xb7, 0x2c, 0xd3, 0x76, 0x03, 0x15, 0x8c, 0x27, 0xdb,
		0xeb, 0x96, 0xc6, 0x28, 0x09, 0x97, 0x94, 0x25, 0xaf, 0xf1, 0xae, 0x44, 0xe6, 0x2f, 0xa6, 0x40,
		0x60, 0x0d, 0x6d, 0xa7, 0x35, 0x4c, 0x18, 0x2a, 0xbf, 0x1b, 0x83, 0xdc, 0x92, 0xd3, 0xaa, 0xb2,
		0x1d, 0x23, 0x9e, 0x87, 0x11, 0xab, 0xb3, 0x41, 0x8a, 0x3a, 0x9a, 0x19, 0xa9, 0xd1, 0x3b, 0x1b,
		0x81, 0x82, 0x8c, 0x3e, 0x63, 0xa3, 0x77, 0x36, 0x70, 0x25, 0xd7, 0x2b, 0x91, 0xe2, 0xc3, 0x97,
		0x48, 0x4d, 0xfe, 0x97, 0x56, 0xe4, 0xb4, 0x52, 0x5b, 0xbe, 0xd3, 0xba, 0x84, 0xb2, 0xec, 0x75,
		0x4b, 0x79, 0xda, 0x0f, 0x79, 0x2c, 0xb3, 0x3f, 0xc7, 0x0a, 0xe6, 0xc3, 0xf2, 0x8b, 0x31, 0x10,
		0x97, 0x9c, 0x56, 0x0d, 0xb5, 0x34, 0xa3, 0x6a, 0x59, 0xeb, 0x24, 0xba, 0x91, 0xda, 0xb9, 0x7a,
		0xf7, 0x6b, 0x67, 0xf6, 0x23, 0x34, 0xa4, 0x9f, 0x8b, 0x41, 0x9e, 0xae, 0xc0, 0xba, 0x81, 0xeb,
		0x5b, 0x32, 0x18, 0xcb, 0xc2, 0xca, 0x77, 0x75, 0x30, 0xb4, 0x8b, 0xbb, 0x5f, 0x2f, 0xfc, 0x5f,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x37, 0xd7, 0xfa, 0xcd, 0x41, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ApplicationEncodable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationEncodable)
	if !ok {
		that2, ok := that.(ApplicationEncodable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if !this.StakedTokens.Equal(that1.StakedTokens) {
		return false
	}
	if !this.MaxRelays.Equal(that1.MaxRelays) {
		return false
	}
	if !this.UnstakingCompletionTime.Equal(that1.UnstakingCompletionTime) {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tokens.Equal(that1.Tokens) {
		return false
	}
	return true
}
func (this *PrevStatePowerMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrevStatePowerMapping)
	if !ok {
		that2, ok := that.(PrevStatePowerMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (m *ApplicationEncodable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationEncodable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationEncodable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintApps(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxRelays.Size()
		i -= size
		if _, err := m.MaxRelays.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StakedTokens.Size()
		i -= size
		if _, err := m.StakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintApps(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintApps(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintApps(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApps(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrevStatePowerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrevStatePowerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrevStatePowerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintApps(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApps(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApps(dAtA []byte, offset int, v uint64) int {
	offset -= sovApps(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationEncodable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApps(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovApps(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovApps(uint64(m.Status))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovApps(uint64(l))
		}
	}
	l = m.StakedTokens.Size()
	n += 1 + l + sovApps(uint64(l))
	l = m.MaxRelays.Size()
	n += 1 + l + sovApps(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovApps(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tokens.Size()
	n += 1 + l + sovApps(uint64(l))
	return n
}

func (m *PrevStatePowerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApps(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovApps(uint64(m.Power))
	}
	return n
}

func sovApps(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApps(x uint64) (n int) {
	return sovApps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationEncodable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationEncodable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationEncodable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= github_com_pokt_network_pocket_core_types.StakeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRelays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRelays.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrevStatePowerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrevStatePowerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrevStatePowerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApps
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApps
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApps
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApps        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApps          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApps = fmt.Errorf("proto: unexpected end of group")
)
