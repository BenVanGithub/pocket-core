// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/apps/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the staking module.
type Params struct {
	UnstakingTime       time.Duration `protobuf:"bytes,1,opt,name=unstaking_time,json=unstakingTime,proto3,stdduration" json:"unstaking_time" yaml:"unstaking_time"`
	MaxApplications     int64         `protobuf:"varint,2,opt,name=max_applications,json=maxApplications,proto3" json:"max_applications" yaml:"max_applications"`
	AppStakeMin         int64         `protobuf:"varint,3,opt,name=app_stake_min,json=appStakeMin,proto3" json:"app_stake_minimum" yaml:"app_stake_minimum"`
	BaseRelaysPerPOKT   int64         `protobuf:"varint,4,opt,name=base_relays_perPOKT,json=baseRelaysPerPOKT,proto3" json:"base_relays_per_pokt" yaml:"base_relays_per_pokt"`
	StabilityAdjustment int64         `protobuf:"varint,5,opt,name=stability_adjustment,json=stabilityAdjustment,proto3" json:"stability_adjustment" yaml:"stability_adjustment"`
	ParticipationRateOn bool          `protobuf:"varint,6,opt,name=participation_rate_on,json=participationRateOn,proto3" json:"participation_rate_on" yaml:"participation_rate_on"`
	MaxChains           int64         `protobuf:"varint,7,opt,name=max_chains,json=maxChains,proto3" json:"maximum_chains" yaml:"maximum_chains"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_209497e842844994, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetUnstakingTime() time.Duration {
	if m != nil {
		return m.UnstakingTime
	}
	return 0
}

func (m *Params) GetMaxApplications() int64 {
	if m != nil {
		return m.MaxApplications
	}
	return 0
}

func (m *Params) GetAppStakeMin() int64 {
	if m != nil {
		return m.AppStakeMin
	}
	return 0
}

func (m *Params) GetBaseRelaysPerPOKT() int64 {
	if m != nil {
		return m.BaseRelaysPerPOKT
	}
	return 0
}

func (m *Params) GetStabilityAdjustment() int64 {
	if m != nil {
		return m.StabilityAdjustment
	}
	return 0
}

func (m *Params) GetParticipationRateOn() bool {
	if m != nil {
		return m.ParticipationRateOn
	}
	return false
}

func (m *Params) GetMaxChains() int64 {
	if m != nil {
		return m.MaxChains
	}
	return 0
}

type GenesisState struct {
	Params       *Params      `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
	Applications Applications `protobuf:"bytes,2,rep,name=applications,proto3,castrepeated=Applications" json:"applications" yaml:"applications"`
	Exported     bool         `protobuf:"varint,3,opt,name=exported,proto3" json:"exported" yaml:"exported"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_209497e842844994, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetApplications() Applications {
	if m != nil {
		return m.Applications
	}
	return nil
}

func (m *GenesisState) GetExported() bool {
	if m != nil {
		return m.Exported
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "x.apps.Params")
	proto.RegisterType((*GenesisState)(nil), "x.apps.GenesisState")
}

func init() { proto.RegisterFile("x/apps/genesis.proto", fileDescriptor_209497e842844994) }

var fileDescriptor_209497e842844994 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x3f, 0x4f, 0xdb, 0x4c,
	0x1c, 0xc7, 0x63, 0x78, 0xc8, 0x93, 0xe7, 0x08, 0xf0, 0xe0, 0x04, 0xd5, 0x05, 0xe4, 0x43, 0x9e,
	0x22, 0x55, 0xd8, 0x2d, 0x0c, 0x55, 0xe9, 0x44, 0x68, 0x55, 0x89, 0xaa, 0x02, 0x19, 0xba, 0xb0,
	0x58, 0x17, 0xe7, 0x6a, 0x8e, 0xe4, 0x7c, 0x27, 0xfb, 0xac, 0x3a, 0xaf, 0xa1, 0x4b, 0x47, 0x46,
	0xe6, 0xbe, 0x12, 0x86, 0x0e, 0x8c, 0x9d, 0x8e, 0x0a, 0x96, 0xca, 0xa3, 0x5f, 0x41, 0xe5, 0x3f,
	0x38, 0x24, 0x64, 0x89, 0x9c, 0xcf, 0xc7, 0xfe, 0xfe, 0xe4, 0xbb, 0xef, 0x19, 0xb4, 0x63, 0x0b,
	0x71, 0x1e, 0x5a, 0x1e, 0xf6, 0x71, 0x48, 0x42, 0x93, 0x07, 0x4c, 0x30, 0xb5, 0x1e, 0x9b, 0x19,
	0x5d, 0x6f, 0x7b, 0xcc, 0x63, 0x39, 0xb2, 0xb2, 0xab, 0xc2, 0xae, 0xeb, 0x1e, 0x63, 0xde, 0x10,
	0x5b, 0xf9, 0xbf, 0x5e, 0xf4, 0xc5, 0xea, 0x47, 0x01, 0x12, 0x84, 0xf9, 0xa5, 0x5f, 0x2d, 0x33,
	0xb3, 0x9f, 0x02, 0x19, 0x3f, 0x17, 0x40, 0xfd, 0x18, 0x05, 0x88, 0x86, 0x6a, 0x04, 0x96, 0x23,
	0x3f, 0x14, 0x68, 0x40, 0x7c, 0xcf, 0x11, 0x84, 0x62, 0x4d, 0xd9, 0x52, 0x3a, 0x8b, 0x3b, 0xcf,
	0xcd, 0x22, 0xd6, 0x7c, 0x88, 0x35, 0xdf, 0x95, 0xb1, 0xdd, 0xdd, 0x6b, 0x09, 0x6b, 0x89, 0x84,
	0x53, 0x0f, 0xa6, 0x12, 0xae, 0x8d, 0x10, 0x1d, 0xee, 0x19, 0x93, 0xdc, 0xb8, 0xbc, 0x85, 0x8a,
	0xbd, 0x54, 0xc1, 0x53, 0x42, 0xb1, 0x7a, 0x06, 0xfe, 0xa7, 0x28, 0x76, 0x10, 0xe7, 0x43, 0xe2,
	0xe6, 0xb1, 0xa1, 0x36, 0xb7, 0xa5, 0x74, 0xe6, 0xbb, 0x56, 0x22, 0xe1, 0x13, 0x97, 0x4a, 0xf8,
	0xac, 0xc8, 0x9e, 0x36, 0x86, 0xbd, 0x42, 0x51, 0xbc, 0xff, 0x88, 0xa8, 0x9f, 0xc1, 0x12, 0xe2,
	0xdc, 0xc9, 0xc6, 0x61, 0x87, 0x12, 0x5f, 0x9b, 0xcf, 0x83, 0x5f, 0x25, 0x12, 0xae, 0x4e, 0x08,
	0x42, 0x23, 0x9a, 0x4a, 0xa8, 0x15, 0xc9, 0x4f, 0x94, 0x61, 0x2f, 0x22, 0xce, 0x4f, 0x32, 0xf4,
	0x89, 0xf8, 0xaa, 0x07, 0x5a, 0x3d, 0x14, 0x62, 0x27, 0xc0, 0x43, 0x34, 0x0a, 0x1d, 0x8e, 0x83,
	0xe3, 0xa3, 0x8f, 0xa7, 0xda, 0x3f, 0x79, 0xf8, 0xeb, 0x44, 0xc2, 0xf6, 0x94, 0x76, 0x38, 0x1b,
	0x88, 0x54, 0xc2, 0x8d, 0x22, 0x7f, 0x96, 0x35, 0xec, 0xd5, 0x0c, 0xdb, 0x39, 0x3d, 0x2e, 0x12,
	0xd5, 0x0b, 0xd0, 0x0e, 0x05, 0xea, 0x91, 0x21, 0x11, 0x23, 0x07, 0xf5, 0x2f, 0xa2, 0x50, 0x50,
	0xec, 0x0b, 0x6d, 0x61, 0x3c, 0x69, 0x96, 0x1f, 0x4f, 0x9a, 0x65, 0x0d, 0xbb, 0x55, 0xe1, 0xfd,
	0x8a, 0xaa, 0x14, 0xac, 0x71, 0x14, 0x08, 0xe2, 0x12, 0x9e, 0xaf, 0x9e, 0x13, 0x20, 0x81, 0x1d,
	0xe6, 0x6b, 0xf5, 0x2d, 0xa5, 0xd3, 0xe8, 0xbe, 0x49, 0x24, 0x9c, 0x7d, 0x43, 0x2a, 0xe1, 0x66,
	0x31, 0x6d, 0xa6, 0x36, 0xec, 0xd6, 0x04, 0xb7, 0x91, 0xc0, 0x47, 0xbe, 0x7a, 0x08, 0x40, 0xb6,
	0x81, 0xee, 0x39, 0x22, 0x7e, 0xa8, 0xfd, 0x9b, 0xbf, 0xd0, 0x8b, 0xac, 0x4a, 0x14, 0xc5, 0xd9,
	0x92, 0x97, 0x66, 0x5c, 0xa5, 0x49, 0x6e, 0xd8, 0xff, 0x51, 0x14, 0x1f, 0xe4, 0xd7, 0x7b, 0x8d,
	0xcb, 0x2b, 0x58, 0xfb, 0x73, 0x05, 0x15, 0xe3, 0xdb, 0x1c, 0x68, 0x7e, 0x28, 0x4e, 0xcc, 0x89,
	0x40, 0x02, 0xab, 0x07, 0xa0, 0xce, 0xf3, 0x7a, 0x97, 0x65, 0x5e, 0x36, 0x8b, 0x13, 0x64, 0x16,
	0xa5, 0xef, 0x6e, 0x24, 0x12, 0x96, 0x77, 0xa4, 0x12, 0x2e, 0x55, 0xef, 0x81, 0x68, 0x68, 0xd8,
	0xa5, 0x50, 0x47, 0xa0, 0x39, 0x55, 0xcf, 0xf9, 0xce, 0xe2, 0xce, 0xe6, 0x43, 0xd4, 0xa3, 0xca,
	0xbd, 0xf7, 0x5d, 0xd6, 0x47, 0xbd, 0x21, 0xce, 0x37, 0xa7, 0x39, 0x55, 0xdc, 0x56, 0x55, 0xaf,
	0x71, 0x69, 0x7f, 0xdc, 0xc2, 0xe6, 0xe3, 0xce, 0xda, 0x13, 0x0f, 0xa9, 0x6f, 0x41, 0x03, 0xc7,
	0x9c, 0x05, 0x02, 0xf7, 0xf3, 0xf2, 0x36, 0xba, 0x30, 0x91, 0xb0, 0x62, 0xa9, 0x84, 0x2b, 0x45,
	0xe8, 0x03, 0x31, 0xec, 0x4a, 0x76, 0x0f, 0xaf, 0xef, 0x74, 0xe5, 0xe6, 0x4e, 0x57, 0x7e, 0xdf,
	0xe9, 0xca, 0xf7, 0x7b, 0xbd, 0x76, 0x73, 0xaf, 0xd7, 0x7e, 0xdd, 0xeb, 0xb5, 0xb3, 0x97, 0x1e,
	0x11, 0xe7, 0x51, 0xcf, 0x74, 0x19, 0xb5, 0xb2, 0xf6, 0x6d, 0xfb, 0x58, 0x7c, 0x65, 0xc1, 0xc0,
	0xe2, 0xcc, 0x1d, 0x60, 0xb1, 0xed, 0xb2, 0x00, 0x5b, 0xe5, 0xd7, 0x42, 0x8c, 0x38, 0x0e, 0x7b,
	0xf5, 0xfc, 0xf4, 0xef, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x82, 0x96, 0x62, 0x6c, 0x98, 0x04,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnstakingTime != that1.UnstakingTime {
		return false
	}
	if this.MaxApplications != that1.MaxApplications {
		return false
	}
	if this.AppStakeMin != that1.AppStakeMin {
		return false
	}
	if this.BaseRelaysPerPOKT != that1.BaseRelaysPerPOKT {
		return false
	}
	if this.StabilityAdjustment != that1.StabilityAdjustment {
		return false
	}
	if this.ParticipationRateOn != that1.ParticipationRateOn {
		return false
	}
	if this.MaxChains != that1.MaxChains {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxChains != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxChains))
		i--
		dAtA[i] = 0x38
	}
	if m.ParticipationRateOn {
		i--
		if m.ParticipationRateOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StabilityAdjustment != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StabilityAdjustment))
		i--
		dAtA[i] = 0x28
	}
	if m.BaseRelaysPerPOKT != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BaseRelaysPerPOKT))
		i--
		dAtA[i] = 0x20
	}
	if m.AppStakeMin != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AppStakeMin))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxApplications != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxApplications))
		i--
		dAtA[i] = 0x10
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnstakingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnstakingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exported {
		i--
		if m.Exported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Applications) > 0 {
		for iNdEx := len(m.Applications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnstakingTime)
	n += 1 + l + sovGenesis(uint64(l))
	if m.MaxApplications != 0 {
		n += 1 + sovGenesis(uint64(m.MaxApplications))
	}
	if m.AppStakeMin != 0 {
		n += 1 + sovGenesis(uint64(m.AppStakeMin))
	}
	if m.BaseRelaysPerPOKT != 0 {
		n += 1 + sovGenesis(uint64(m.BaseRelaysPerPOKT))
	}
	if m.StabilityAdjustment != 0 {
		n += 1 + sovGenesis(uint64(m.StabilityAdjustment))
	}
	if m.ParticipationRateOn {
		n += 2
	}
	if m.MaxChains != 0 {
		n += 1 + sovGenesis(uint64(m.MaxChains))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Exported {
		n += 2
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnstakingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplications", wireType)
			}
			m.MaxApplications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApplications |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppStakeMin", wireType)
			}
			m.AppStakeMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppStakeMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRelaysPerPOKT", wireType)
			}
			m.BaseRelaysPerPOKT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseRelaysPerPOKT |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StabilityAdjustment", wireType)
			}
			m.StabilityAdjustment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StabilityAdjustment |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationRateOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParticipationRateOn = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChains", wireType)
			}
			m.MaxChains = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxChains |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &ApplicationEncodable{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
