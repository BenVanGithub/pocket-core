// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/nodes/genesis.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	github_com_pokt_network_pocket_core_types "github.com/pokt-network/pocket-core/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the staking module.
type Params struct {
	RelaysToTokenMultiplier int64                                         `protobuf:"varint,1,opt,name=RelaysToTokenMultiplier,proto3" json:"relays_to_tokens_multiplier" yaml:"relays_to_tokens_multiplier"`
	UnstakingTime           time.Duration                                 `protobuf:"bytes,2,opt,name=UnstakingTime,proto3,stdduration" json:"unstaking_time" yaml:"unstaking_time"`
	MaxValidators           int64                                         `protobuf:"varint,3,opt,name=MaxValidators,proto3" json:"max_validators" yaml:"max_validators"`
	StakeDenom              string                                        `protobuf:"bytes,4,opt,name=StakeDenom,proto3" json:"stake_denom" yaml:"stake_denom"`
	StakeMinimun            int64                                         `protobuf:"varint,5,opt,name=StakeMinimun,proto3" json:"stake_minimum" yaml:"stake_minimum"`
	SessionBlockFrequency   int64                                         `protobuf:"varint,6,opt,name=SessionBlockFrequency,proto3" json:"session_block_frequency" yaml:"session_block_frequency"`
	DaoAlocation            int64                                         `protobuf:"varint,7,opt,name=DaoAlocation,proto3" json:"dao_allocation" yaml:"dao_allocation"`
	ProposerAllocation      int64                                         `protobuf:"varint,8,opt,name=ProposerAllocation,proto3" json:"proposer_allocation" yaml:"proposer_allocation"`
	MaximumChains           int64                                         `protobuf:"varint,9,opt,name=MaximumChains,proto3" json:"maximum_chains" yaml:"maximum_chains"`
	MaxJailedBlocks         int64                                         `protobuf:"varint,10,opt,name=MaxJailedBlocks,proto3" json:"max_jailed_blocks" yaml:"max_jailed_blocks"`
	MaxEvidenceAge          time.Duration                                 `protobuf:"bytes,11,opt,name=MaxEvidenceAge,proto3,stdduration" json:"max_evidence_age" yaml:"max_evidence_age"`
	SignedBlocksWindow      int64                                         `protobuf:"varint,12,opt,name=SignedBlocksWindow,proto3" json:"signed_blocks_window" yaml:"signed_blocks_window"`
	MinSignedPerWindow      github_com_pokt_network_pocket_core_types.Dec `protobuf:"bytes,13,opt,name=MinSignedPerWindow,proto3,customtype=github.com/pokt-network/pocket-core/types.Dec" json:"min_signed_per_window" yaml:"min_signed_per_window"`
	DowntimeJailDuration    time.Duration                                 `protobuf:"bytes,14,opt,name=DowntimeJailDuration,proto3,stdduration" json:"downtime_jail_duration" yaml:"downtime_jail_duration"`
	SlashFractionDoubleSign github_com_pokt_network_pocket_core_types.Dec `protobuf:"bytes,15,opt,name=SlashFractionDoubleSign,proto3,customtype=github.com/pokt-network/pocket-core/types.Dec" json:"slash_fraction_double_sign" yaml:"slash_fraction_double_sign"`
	SlashFractionDowntime   github_com_pokt_network_pocket_core_types.Dec `protobuf:"bytes,16,opt,name=SlashFractionDowntime,proto3,customtype=github.com/pokt-network/pocket-core/types.Dec" json:"slash_fraction_downtime" yaml:"slash_fraction_downtime"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_58e4252e5bc41070, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRelaysToTokenMultiplier() int64 {
	if m != nil {
		return m.RelaysToTokenMultiplier
	}
	return 0
}

func (m *Params) GetUnstakingTime() time.Duration {
	if m != nil {
		return m.UnstakingTime
	}
	return 0
}

func (m *Params) GetMaxValidators() int64 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetStakeDenom() string {
	if m != nil {
		return m.StakeDenom
	}
	return ""
}

func (m *Params) GetStakeMinimun() int64 {
	if m != nil {
		return m.StakeMinimun
	}
	return 0
}

func (m *Params) GetSessionBlockFrequency() int64 {
	if m != nil {
		return m.SessionBlockFrequency
	}
	return 0
}

func (m *Params) GetDaoAlocation() int64 {
	if m != nil {
		return m.DaoAlocation
	}
	return 0
}

func (m *Params) GetProposerAllocation() int64 {
	if m != nil {
		return m.ProposerAllocation
	}
	return 0
}

func (m *Params) GetMaximumChains() int64 {
	if m != nil {
		return m.MaximumChains
	}
	return 0
}

func (m *Params) GetMaxJailedBlocks() int64 {
	if m != nil {
		return m.MaxJailedBlocks
	}
	return 0
}

func (m *Params) GetMaxEvidenceAge() time.Duration {
	if m != nil {
		return m.MaxEvidenceAge
	}
	return 0
}

func (m *Params) GetSignedBlocksWindow() int64 {
	if m != nil {
		return m.SignedBlocksWindow
	}
	return 0
}

func (m *Params) GetDowntimeJailDuration() time.Duration {
	if m != nil {
		return m.DowntimeJailDuration
	}
	return 0
}

// MissedBlock contains height and missed status as boolean.
type MissedBlock struct {
	// index is the height at which the block was missed.
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// missed is the missed status.
	Missed bool `protobuf:"varint,2,opt,name=missed,proto3" json:"missed,omitempty"`
}

func (m *MissedBlock) Reset()         { *m = MissedBlock{} }
func (m *MissedBlock) String() string { return proto.CompactTextString(m) }
func (*MissedBlock) ProtoMessage()    {}
func (*MissedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_58e4252e5bc41070, []int{1}
}
func (m *MissedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissedBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissedBlock.Merge(m, src)
}
func (m *MissedBlock) XXX_Size() int {
	return m.Size()
}
func (m *MissedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MissedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MissedBlock proto.InternalMessageInfo

func (m *MissedBlock) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MissedBlock) GetMissed() bool {
	if m != nil {
		return m.Missed
	}
	return false
}

type PrevStatePowerMapping struct {
	Address github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"address,omitempty"`
	Power   int64                                             `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *PrevStatePowerMapping) Reset()         { *m = PrevStatePowerMapping{} }
func (m *PrevStatePowerMapping) String() string { return proto.CompactTextString(m) }
func (*PrevStatePowerMapping) ProtoMessage()    {}
func (*PrevStatePowerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_58e4252e5bc41070, []int{2}
}
func (m *PrevStatePowerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrevStatePowerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrevStatePowerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrevStatePowerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrevStatePowerMapping.Merge(m, src)
}
func (m *PrevStatePowerMapping) XXX_Size() int {
	return m.Size()
}
func (m *PrevStatePowerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PrevStatePowerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PrevStatePowerMapping proto.InternalMessageInfo

type GenesisState struct {
	Params                   *Params                                           `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	PrevStateTotalPower      github_com_pokt_network_pocket_core_types.Int     `protobuf:"bytes,2,opt,name=PrevStateTotalPower,proto3,customtype=github.com/pokt-network/pocket-core/types.Int" json:"prevState_total_power" yaml:"prevState_total_power"`
	PrevStateValidatorPowers []*PrevStatePowerMapping                          `protobuf:"bytes,3,rep,name=PrevStateValidatorPowers,proto3" json:"prevState_validator_powers"`
	Validators               []*ValidatorProto                                 `protobuf:"bytes,4,rep,name=Validators,proto3" json:"validators"`
	Exported                 bool                                              `protobuf:"varint,5,opt,name=Exported,proto3" json:"exported"`
	SigningInfos             map[string]*ValidatorSigningInfo                  `protobuf:"bytes,6,rep,name=SigningInfos,proto3" json:"signing_infos" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MissedBlocks             map[string]*MissedBlockArray                      `protobuf:"bytes,7,rep,name=MissedBlocks,proto3" json:"missed_blocks" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreviousProposer         github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,8,opt,name=PreviousProposer,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"PreviousProposer,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_58e4252e5bc41070, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetPrevStateValidatorPowers() []*PrevStatePowerMapping {
	if m != nil {
		return m.PrevStateValidatorPowers
	}
	return nil
}

func (m *GenesisState) GetValidators() []*ValidatorProto {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GenesisState) GetExported() bool {
	if m != nil {
		return m.Exported
	}
	return false
}

func (m *GenesisState) GetSigningInfos() map[string]*ValidatorSigningInfo {
	if m != nil {
		return m.SigningInfos
	}
	return nil
}

func (m *GenesisState) GetMissedBlocks() map[string]*MissedBlockArray {
	if m != nil {
		return m.MissedBlocks
	}
	return nil
}

func (m *GenesisState) GetPreviousProposer() github_com_pokt_network_pocket_core_types.Address {
	if m != nil {
		return m.PreviousProposer
	}
	return nil
}

type MissedBlockArray struct {
	MissedBlocks []*MissedBlock `protobuf:"bytes,1,rep,name=MissedBlocks,proto3" json:"missed_blocks"`
}

func (m *MissedBlockArray) Reset()         { *m = MissedBlockArray{} }
func (m *MissedBlockArray) String() string { return proto.CompactTextString(m) }
func (*MissedBlockArray) ProtoMessage()    {}
func (*MissedBlockArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_58e4252e5bc41070, []int{4}
}
func (m *MissedBlockArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissedBlockArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissedBlockArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissedBlockArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissedBlockArray.Merge(m, src)
}
func (m *MissedBlockArray) XXX_Size() int {
	return m.Size()
}
func (m *MissedBlockArray) XXX_DiscardUnknown() {
	xxx_messageInfo_MissedBlockArray.DiscardUnknown(m)
}

var xxx_messageInfo_MissedBlockArray proto.InternalMessageInfo

func (m *MissedBlockArray) GetMissedBlocks() []*MissedBlock {
	if m != nil {
		return m.MissedBlocks
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "x.apps.Params")
	proto.RegisterType((*MissedBlock)(nil), "x.apps.MissedBlock")
	proto.RegisterType((*PrevStatePowerMapping)(nil), "x.apps.PrevStatePowerMapping")
	proto.RegisterType((*GenesisState)(nil), "x.apps.GenesisState")
	proto.RegisterMapType((map[string]*MissedBlockArray)(nil), "x.apps.GenesisState.MissedBlocksEntry")
	proto.RegisterMapType((map[string]*ValidatorSigningInfo)(nil), "x.apps.GenesisState.SigningInfosEntry")
	proto.RegisterType((*MissedBlockArray)(nil), "x.apps.MissedBlockArray")
}

func init() { proto.RegisterFile("x/nodes/genesis.proto", fileDescriptor_58e4252e5bc41070) }

var fileDescriptor_58e4252e5bc41070 = []byte{
	// 1318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0x8f, 0x9b, 0x76, 0x93, 0x4e, 0x36, 0x69, 0x32, 0x49, 0x1a, 0x7f, 0xd3, 0x76, 0xa7, 0x5f,
	0x4b, 0xa0, 0x20, 0xd4, 0x5d, 0x35, 0x55, 0x55, 0x14, 0x89, 0x43, 0xb6, 0x49, 0x51, 0x8b, 0x56,
	0x0d, 0x93, 0x00, 0x02, 0x54, 0x59, 0x93, 0xf5, 0xc4, 0x35, 0xeb, 0x9d, 0x31, 0x1e, 0x6f, 0xb2,
	0xcb, 0x85, 0x2b, 0x07, 0x0e, 0x88, 0x53, 0x4f, 0x28, 0x47, 0xce, 0x5c, 0xf8, 0x17, 0x2a, 0x4e,
	0x3d, 0x22, 0x0e, 0x06, 0xb5, 0x17, 0xe4, 0xe3, 0x1e, 0x39, 0xa1, 0x99, 0xb1, 0x77, 0xed, 0xc4,
	0x69, 0xab, 0x5c, 0x12, 0xcf, 0xfb, 0xbc, 0xf9, 0xbc, 0x5f, 0xf3, 0x66, 0xde, 0x82, 0xe5, 0x7e,
	0x83, 0x71, 0x87, 0x8a, 0x86, 0x4b, 0x19, 0x15, 0x9e, 0xa8, 0x07, 0x21, 0x8f, 0x38, 0xac, 0xf4,
	0xeb, 0x24, 0x08, 0xc4, 0xea, 0x92, 0xcb, 0x5d, 0xae, 0x44, 0x0d, 0xf9, 0xa5, 0xd1, 0xd5, 0x9a,
	0xcb, 0xb9, 0xeb, 0xd3, 0x86, 0x5a, 0xed, 0xf7, 0x0e, 0x1a, 0x4e, 0x2f, 0x24, 0x91, 0xc7, 0x59,
	0x8a, 0x2f, 0x66, 0xa4, 0xea, 0xaf, 0x16, 0x5a, 0xbf, 0xcf, 0x81, 0xca, 0x0e, 0x09, 0x49, 0x57,
	0xc0, 0xef, 0xc0, 0x0a, 0xa6, 0x3e, 0x19, 0x88, 0x3d, 0xbe, 0xc7, 0x3b, 0x94, 0xb5, 0x7a, 0x7e,
	0xe4, 0x05, 0xbe, 0x47, 0x43, 0xd3, 0xb8, 0x69, 0xac, 0x4d, 0x36, 0xb7, 0x93, 0x18, 0x5d, 0x0b,
	0x95, 0x8a, 0x1d, 0x71, 0x3b, 0x92, 0x4a, 0xc2, 0xee, 0x8e, 0xd4, 0x86, 0x31, 0xb2, 0x06, 0xa4,
	0xeb, 0x6f, 0x58, 0xaf, 0x51, 0xb2, 0xf0, 0x59, 0x56, 0x60, 0x04, 0x66, 0x3f, 0x65, 0x22, 0x22,
	0x1d, 0x8f, 0xb9, 0x7b, 0x5e, 0x97, 0x9a, 0x17, 0x6e, 0x1a, 0x6b, 0x33, 0xeb, 0xff, 0xab, 0xeb,
	0xc0, 0xea, 0x59, 0x60, 0xf5, 0xad, 0x34, 0xb0, 0xe6, 0x9d, 0xe7, 0x31, 0x9a, 0x48, 0x62, 0x34,
	0xd7, 0xcb, 0xf6, 0xd9, 0x91, 0xd7, 0xa5, 0xc3, 0x18, 0x2d, 0x6b, 0x47, 0x8a, 0x72, 0xeb, 0xd9,
	0x5f, 0xc8, 0xc0, 0x45, 0x23, 0xf0, 0x13, 0x30, 0xdb, 0x22, 0xfd, 0xcf, 0x88, 0xef, 0x39, 0x24,
	0xe2, 0xa1, 0x30, 0x27, 0x55, 0xb0, 0xef, 0x4b, 0xda, 0x2e, 0xe9, 0xdb, 0x87, 0x23, 0x64, 0x4c,
	0x5b, 0x94, 0x5b, 0xb8, 0xc8, 0x00, 0xb7, 0x01, 0xd8, 0x8d, 0x48, 0x87, 0x6e, 0x51, 0xc6, 0xbb,
	0xe6, 0xc5, 0x9b, 0xc6, 0xda, 0xe5, 0xe6, 0x3b, 0x49, 0x8c, 0x66, 0xa4, 0x5d, 0x6a, 0x3b, 0x52,
	0x3c, 0x8c, 0x11, 0xd4, 0x64, 0x39, 0xa1, 0x85, 0x73, 0x1b, 0x61, 0x0b, 0x54, 0xd5, 0xaa, 0xe5,
	0x31, 0xaf, 0xdb, 0x63, 0xe6, 0x25, 0xe5, 0xd8, 0x7b, 0x49, 0x8c, 0x66, 0xf5, 0x9e, 0xae, 0x02,
	0x24, 0xd5, 0x52, 0x9e, 0x2a, 0x15, 0x5b, 0xb8, 0xb0, 0x1d, 0x0a, 0xb0, 0xbc, 0x4b, 0x85, 0x90,
	0x79, 0xf3, 0x79, 0xbb, 0xf3, 0x20, 0xa4, 0xdf, 0xf4, 0x28, 0x6b, 0x0f, 0xcc, 0x8a, 0xe2, 0xfd,
	0x30, 0x89, 0xd1, 0x8a, 0xd0, 0x0a, 0xf6, 0xbe, 0xd4, 0xb0, 0x0f, 0x32, 0x95, 0x61, 0x8c, 0x6a,
	0xa9, 0x85, 0x72, 0x05, 0x0b, 0x97, 0x73, 0xc3, 0xc7, 0xa0, 0xba, 0x45, 0xf8, 0xa6, 0xcf, 0xdb,
	0xaa, 0x62, 0xe6, 0xd4, 0x38, 0xb9, 0x0e, 0xe1, 0x36, 0xf1, 0x33, 0x64, 0x9c, 0xdc, 0xa2, 0xdc,
	0xc2, 0x05, 0x02, 0x48, 0x01, 0xdc, 0x09, 0x79, 0xc0, 0x05, 0x0d, 0x37, 0x47, 0x4a, 0xe6, 0xb4,
	0xa2, 0xbd, 0x9b, 0xc4, 0x68, 0x31, 0x48, 0xd1, 0x22, 0xf7, 0xaa, 0xe6, 0x2e, 0x01, 0x2d, 0x5c,
	0x42, 0x98, 0x9e, 0x0a, 0x99, 0xc6, 0xfb, 0x4f, 0x89, 0xc7, 0x84, 0x79, 0xb9, 0x70, 0x2a, 0x24,
	0x60, 0xb7, 0x15, 0x52, 0x38, 0x15, 0x39, 0xb9, 0x3e, 0x15, 0x63, 0x06, 0xf8, 0x15, 0xb8, 0xd2,
	0x22, 0xfd, 0x47, 0xc4, 0xf3, 0xa9, 0xa3, 0xb2, 0x24, 0x4c, 0xa0, 0x48, 0x6f, 0x27, 0x31, 0x5a,
	0x90, 0x47, 0xea, 0x6b, 0x85, 0xe9, 0xdc, 0x4a, 0x5e, 0x73, 0x7c, 0xda, 0x0a, 0x90, 0x85, 0x4f,
	0x32, 0xc1, 0x6f, 0xc1, 0x5c, 0x8b, 0xf4, 0xb7, 0x0f, 0x3d, 0x87, 0xb2, 0x36, 0xdd, 0x74, 0xa9,
	0x39, 0xf3, 0xa6, 0xe6, 0xb9, 0x97, 0x36, 0xcf, 0xbc, 0xe4, 0xa7, 0xe9, 0x4e, 0x9b, 0xb8, 0xb2,
	0x7d, 0x56, 0xc6, 0x96, 0xf3, 0x88, 0x6e, 0xa0, 0x13, 0x96, 0xa0, 0x0b, 0xe0, 0xae, 0xe7, 0xb2,
	0xcc, 0x97, 0xcf, 0x3d, 0xe6, 0xf0, 0x23, 0xb3, 0xaa, 0x62, 0xbb, 0x97, 0xc4, 0x68, 0x49, 0x28,
	0x34, 0x75, 0xde, 0x3e, 0x52, 0xf8, 0x30, 0x46, 0xd7, 0xd2, 0x23, 0x55, 0x82, 0x5a, 0xb8, 0x84,
	0x12, 0xfe, 0x6c, 0x00, 0xd8, 0xf2, 0x98, 0x46, 0x76, 0x68, 0x98, 0x5a, 0x9a, 0x55, 0x0d, 0xc6,
	0x64, 0x38, 0x7f, 0xc6, 0xe8, 0x96, 0xeb, 0x45, 0x4f, 0x7b, 0xfb, 0xf5, 0x36, 0xef, 0x36, 0x02,
	0xde, 0x89, 0x6e, 0x31, 0x1a, 0x1d, 0xf1, 0xb0, 0xd3, 0x08, 0x78, 0xbb, 0x43, 0xa3, 0x5b, 0x6d,
	0x1e, 0xd2, 0x46, 0x34, 0x08, 0xa8, 0xa8, 0x6f, 0xd1, 0x76, 0x12, 0xa3, 0xe5, 0xae, 0xc7, 0xec,
	0xd4, 0x89, 0x80, 0x86, 0x63, 0xff, 0xae, 0xa7, 0x49, 0x28, 0x83, 0x2d, 0x5c, 0xe2, 0x09, 0xfc,
	0xc9, 0x00, 0x4b, 0x5b, 0xfc, 0x88, 0xc9, 0xcb, 0x46, 0x96, 0x27, 0xcb, 0xb5, 0x39, 0xf7, 0xa6,
	0x62, 0xdc, 0x4f, 0x8b, 0x71, 0xd5, 0x49, 0xb7, 0xab, 0x8a, 0xdb, 0xd9, 0x15, 0x3e, 0x8c, 0xd1,
	0x8d, 0xb4, 0x3b, 0x4a, 0x71, 0x5d, 0x98, 0x52, 0xdb, 0xf0, 0x57, 0x03, 0xac, 0xec, 0xfa, 0x44,
	0x3c, 0x7d, 0x10, 0x92, 0xb6, 0x94, 0x6c, 0xf1, 0xde, 0xbe, 0x4f, 0xa5, 0xef, 0xe6, 0x15, 0x95,
	0xba, 0xfe, 0x79, 0x53, 0xb7, 0x2a, 0x24, 0xaf, 0x7d, 0x90, 0x12, 0xdb, 0x8e, 0x62, 0x56, 0xd9,
	0x1a, 0xc6, 0xe8, 0xff, 0x69, 0x7d, 0xcf, 0xd4, 0xb1, 0xf0, 0x59, 0x8e, 0xc1, 0x5f, 0x0c, 0xb0,
	0x7c, 0x02, 0xd3, 0xa1, 0x99, 0xf3, 0xca, 0xe5, 0xf0, 0xbc, 0x2e, 0xaf, 0x9c, 0x72, 0x47, 0xf3,
	0xe6, 0xae, 0xb8, 0x72, 0x05, 0x79, 0xc5, 0x95, 0x39, 0xb4, 0x31, 0xfd, 0xec, 0x18, 0x4d, 0xfc,
	0x73, 0x8c, 0x0c, 0x6b, 0x13, 0xcc, 0xb4, 0x3c, 0x21, 0xd2, 0x53, 0x0b, 0x97, 0xc0, 0x25, 0x8f,
	0x39, 0xb4, 0xaf, 0x9f, 0x4f, 0xac, 0x17, 0xf0, 0x2a, 0xa8, 0x74, 0x95, 0x92, 0x7a, 0xde, 0xa6,
	0x71, 0xba, 0xda, 0xb8, 0xa8, 0x28, 0x7e, 0x30, 0xc0, 0xf2, 0x4e, 0x48, 0x0f, 0x77, 0x23, 0x12,
	0xd1, 0x1d, 0x7e, 0x44, 0xc3, 0x16, 0x09, 0x02, 0x8f, 0xb9, 0xf0, 0x31, 0x98, 0x22, 0x8e, 0x13,
	0x52, 0x21, 0x14, 0x5f, 0xb5, 0x79, 0xf7, 0xdf, 0x18, 0xdd, 0x7e, 0xfb, 0xf0, 0x37, 0xf5, 0x66,
	0x9c, 0xb1, 0x48, 0xf7, 0x02, 0x69, 0x40, 0xf9, 0x31, 0x89, 0xf5, 0x62, 0xa3, 0xfa, 0xfd, 0x31,
	0x9a, 0x78, 0x76, 0x8c, 0x0c, 0xe5, 0xce, 0x6f, 0x53, 0xa0, 0xfa, 0x91, 0x9e, 0x41, 0x94, 0x47,
	0x70, 0x1d, 0x54, 0x02, 0x35, 0x2e, 0x28, 0x27, 0x66, 0xd6, 0xe7, 0xea, 0x7a, 0x26, 0xa9, 0xeb,
	0x21, 0xa2, 0x09, 0x92, 0x18, 0xa5, 0x1a, 0x38, 0xfd, 0x0f, 0x8f, 0x0d, 0xb0, 0x38, 0x8a, 0x69,
	0x8f, 0x47, 0xc4, 0xdf, 0x19, 0xd9, 0x3d, 0x57, 0xdf, 0x3e, 0x64, 0x91, 0xec, 0xdb, 0x20, 0xe3,
	0xb4, 0x23, 0x49, 0x6a, 0xab, 0x00, 0xc6, 0x7d, 0x5b, 0x0a, 0x5b, 0xb8, 0xcc, 0x15, 0x38, 0x00,
	0xe6, 0x48, 0x3c, 0x7a, 0xc8, 0x15, 0x24, 0xe7, 0x81, 0xc9, 0xb5, 0x99, 0xf5, 0x1b, 0xa3, 0x40,
	0xcb, 0xaa, 0xd3, 0xac, 0xc9, 0x6e, 0x18, 0x5b, 0x1c, 0x0d, 0x07, 0xda, 0xaa, 0xc0, 0x67, 0xd2,
	0xc3, 0x07, 0x00, 0xe4, 0x86, 0x8f, 0x8b, 0xca, 0xd8, 0xd5, 0xcc, 0xd8, 0x58, 0x59, 0xde, 0x18,
	0xcd, 0xb9, 0x24, 0x46, 0x60, 0x3c, 0x78, 0xe0, 0xdc, 0x4e, 0xb8, 0x06, 0xa6, 0xb7, 0xfb, 0x01,
	0x0f, 0x23, 0xea, 0xa8, 0x49, 0x61, 0xba, 0x59, 0x4d, 0x62, 0x34, 0x4d, 0x53, 0x19, 0x1e, 0xa1,
	0xf0, 0x09, 0xa8, 0xca, 0x1e, 0xf3, 0x98, 0xfb, 0x90, 0x1d, 0x70, 0x61, 0x56, 0x94, 0xcd, 0x77,
	0x33, 0x9b, 0xf9, 0x7a, 0xd7, 0xf3, 0x8a, 0xdb, 0x2c, 0x0a, 0x07, 0xcd, 0x05, 0x35, 0x7f, 0x68,
	0xb1, 0xed, 0x49, 0x39, 0x2e, 0xd0, 0x49, 0xfa, 0x5c, 0x17, 0x08, 0x73, 0xea, 0x35, 0xf4, 0x79,
	0xc5, 0x1c, 0xbd, 0x6e, 0x89, 0xf4, 0x49, 0xc0, 0x05, 0x3a, 0x48, 0xc0, 0xbc, 0xcc, 0xa5, 0xc7,
	0x7b, 0x22, 0x7b, 0xb7, 0xd5, 0xf3, 0x7f, 0xee, 0x86, 0x38, 0x45, 0xb7, 0xfa, 0x04, 0x2c, 0x9c,
	0x8a, 0x1b, 0xce, 0x83, 0xc9, 0x0e, 0x1d, 0xa8, 0x63, 0x7f, 0x19, 0xcb, 0x4f, 0xb8, 0x0e, 0x2e,
	0x1d, 0x12, 0xbf, 0x97, 0xcd, 0xa9, 0xd7, 0x4f, 0x15, 0x2d, 0x47, 0x82, 0xb5, 0xea, 0xc6, 0x85,
	0x0f, 0x8c, 0xd5, 0x2f, 0xc0, 0xc2, 0xa9, 0xb8, 0x4b, 0xe8, 0xeb, 0x45, 0x7a, 0x33, 0xa3, 0xcf,
	0xed, 0xdd, 0x0c, 0x43, 0x32, 0xc8, 0x51, 0xab, 0xbb, 0x48, 0x77, 0xae, 0x03, 0xe6, 0x4f, 0x2a,
	0xc2, 0x47, 0x27, 0x2a, 0x63, 0xa8, 0xca, 0x2c, 0x96, 0x10, 0xbf, 0xb1, 0x0c, 0xfa, 0xba, 0x6a,
	0x7e, 0xfc, 0xfc, 0x65, 0xcd, 0x78, 0xf1, 0xb2, 0x66, 0xfc, 0xfd, 0xb2, 0x66, 0xfc, 0xf8, 0xaa,
	0x36, 0xf1, 0xe2, 0x55, 0x6d, 0xe2, 0x8f, 0x57, 0xb5, 0x89, 0x2f, 0xdf, 0xaa, 0x10, 0xd9, 0x2f,
	0x12, 0x55, 0x90, 0xfd, 0x8a, 0x7a, 0x16, 0xef, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x23, 0xc2,
	0x35, 0xa0, 0xfe, 0x0c, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RelaysToTokenMultiplier != that1.RelaysToTokenMultiplier {
		return false
	}
	if this.UnstakingTime != that1.UnstakingTime {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.StakeDenom != that1.StakeDenom {
		return false
	}
	if this.StakeMinimun != that1.StakeMinimun {
		return false
	}
	if this.SessionBlockFrequency != that1.SessionBlockFrequency {
		return false
	}
	if this.DaoAlocation != that1.DaoAlocation {
		return false
	}
	if this.ProposerAllocation != that1.ProposerAllocation {
		return false
	}
	if this.MaximumChains != that1.MaximumChains {
		return false
	}
	if this.MaxJailedBlocks != that1.MaxJailedBlocks {
		return false
	}
	if this.MaxEvidenceAge != that1.MaxEvidenceAge {
		return false
	}
	if this.SignedBlocksWindow != that1.SignedBlocksWindow {
		return false
	}
	if !this.MinSignedPerWindow.Equal(that1.MinSignedPerWindow) {
		return false
	}
	if this.DowntimeJailDuration != that1.DowntimeJailDuration {
		return false
	}
	if !this.SlashFractionDoubleSign.Equal(that1.SlashFractionDoubleSign) {
		return false
	}
	if !this.SlashFractionDowntime.Equal(that1.SlashFractionDowntime) {
		return false
	}
	return true
}
func (this *MissedBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MissedBlock)
	if !ok {
		that2, ok := that.(MissedBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Missed != that1.Missed {
		return false
	}
	return true
}
func (this *PrevStatePowerMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrevStatePowerMapping)
	if !ok {
		that2, ok := that.(PrevStatePowerMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *GenesisState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisState)
	if !ok {
		that2, ok := that.(GenesisState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(that1.Params) {
		return false
	}
	if !this.PrevStateTotalPower.Equal(that1.PrevStateTotalPower) {
		return false
	}
	if len(this.PrevStateValidatorPowers) != len(that1.PrevStateValidatorPowers) {
		return false
	}
	for i := range this.PrevStateValidatorPowers {
		if !this.PrevStateValidatorPowers[i].Equal(that1.PrevStateValidatorPowers[i]) {
			return false
		}
	}
	if len(this.Validators) != len(that1.Validators) {
		return false
	}
	for i := range this.Validators {
		if !this.Validators[i].Equal(that1.Validators[i]) {
			return false
		}
	}
	if this.Exported != that1.Exported {
		return false
	}
	if len(this.SigningInfos) != len(that1.SigningInfos) {
		return false
	}
	for i := range this.SigningInfos {
		if !this.SigningInfos[i].Equal(that1.SigningInfos[i]) {
			return false
		}
	}
	if len(this.MissedBlocks) != len(that1.MissedBlocks) {
		return false
	}
	for i := range this.MissedBlocks {
		if !this.MissedBlocks[i].Equal(that1.MissedBlocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.PreviousProposer, that1.PreviousProposer) {
		return false
	}
	return true
}
func (this *MissedBlockArray) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MissedBlockArray)
	if !ok {
		that2, ok := that.(MissedBlockArray)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MissedBlocks) != len(that1.MissedBlocks) {
		return false
	}
	for i := range this.MissedBlocks {
		if !this.MissedBlocks[i].Equal(that1.MissedBlocks[i]) {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashFractionDowntime.Size()
		i -= size
		if _, err := m.SlashFractionDowntime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.SlashFractionDoubleSign.Size()
		i -= size
		if _, err := m.SlashFractionDoubleSign.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DowntimeJailDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeJailDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x72
	{
		size := m.MinSignedPerWindow.Size()
		i -= size
		if _, err := m.MinSignedPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.SignedBlocksWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedBlocksWindow))
		i--
		dAtA[i] = 0x60
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxEvidenceAge, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxEvidenceAge):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	if m.MaxJailedBlocks != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxJailedBlocks))
		i--
		dAtA[i] = 0x50
	}
	if m.MaximumChains != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaximumChains))
		i--
		dAtA[i] = 0x48
	}
	if m.ProposerAllocation != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ProposerAllocation))
		i--
		dAtA[i] = 0x40
	}
	if m.DaoAlocation != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DaoAlocation))
		i--
		dAtA[i] = 0x38
	}
	if m.SessionBlockFrequency != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SessionBlockFrequency))
		i--
		dAtA[i] = 0x30
	}
	if m.StakeMinimun != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StakeMinimun))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StakeDenom) > 0 {
		i -= len(m.StakeDenom)
		copy(dAtA[i:], m.StakeDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StakeDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxValidators != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x18
	}
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnstakingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnstakingTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGenesis(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if m.RelaysToTokenMultiplier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RelaysToTokenMultiplier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissedBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissedBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Missed {
		i--
		if m.Missed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrevStatePowerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrevStatePowerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrevStatePowerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousProposer) > 0 {
		i -= len(m.PreviousProposer)
		copy(dAtA[i:], m.PreviousProposer)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PreviousProposer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MissedBlocks) > 0 {
		for k := range m.MissedBlocks {
			v := m.MissedBlocks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGenesis(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SigningInfos) > 0 {
		for k := range m.SigningInfos {
			v := m.SigningInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGenesis(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Exported {
		i--
		if m.Exported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PrevStateValidatorPowers) > 0 {
		for iNdEx := len(m.PrevStateValidatorPowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrevStateValidatorPowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.PrevStateTotalPower.Size()
		i -= size
		if _, err := m.PrevStateTotalPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MissedBlockArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissedBlockArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissedBlockArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissedBlocks) > 0 {
		for iNdEx := len(m.MissedBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MissedBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelaysToTokenMultiplier != 0 {
		n += 1 + sovGenesis(uint64(m.RelaysToTokenMultiplier))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnstakingTime)
	n += 1 + l + sovGenesis(uint64(l))
	if m.MaxValidators != 0 {
		n += 1 + sovGenesis(uint64(m.MaxValidators))
	}
	l = len(m.StakeDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.StakeMinimun != 0 {
		n += 1 + sovGenesis(uint64(m.StakeMinimun))
	}
	if m.SessionBlockFrequency != 0 {
		n += 1 + sovGenesis(uint64(m.SessionBlockFrequency))
	}
	if m.DaoAlocation != 0 {
		n += 1 + sovGenesis(uint64(m.DaoAlocation))
	}
	if m.ProposerAllocation != 0 {
		n += 1 + sovGenesis(uint64(m.ProposerAllocation))
	}
	if m.MaximumChains != 0 {
		n += 1 + sovGenesis(uint64(m.MaximumChains))
	}
	if m.MaxJailedBlocks != 0 {
		n += 1 + sovGenesis(uint64(m.MaxJailedBlocks))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxEvidenceAge)
	n += 1 + l + sovGenesis(uint64(l))
	if m.SignedBlocksWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedBlocksWindow))
	}
	l = m.MinSignedPerWindow.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeJailDuration)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionDoubleSign.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionDowntime.Size()
	n += 2 + l + sovGenesis(uint64(l))
	return n
}

func (m *MissedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGenesis(uint64(m.Index))
	}
	if m.Missed {
		n += 2
	}
	return n
}

func (m *PrevStatePowerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovGenesis(uint64(m.Power))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.PrevStateTotalPower.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PrevStateValidatorPowers) > 0 {
		for _, e := range m.PrevStateValidatorPowers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Exported {
		n += 2
	}
	if len(m.SigningInfos) > 0 {
		for k, v := range m.SigningInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenesis(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.MissedBlocks) > 0 {
		for k, v := range m.MissedBlocks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenesis(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	l = len(m.PreviousProposer)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *MissedBlockArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MissedBlocks) > 0 {
		for _, e := range m.MissedBlocks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelaysToTokenMultiplier", wireType)
			}
			m.RelaysToTokenMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelaysToTokenMultiplier |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnstakingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMinimun", wireType)
			}
			m.StakeMinimun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeMinimun |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionBlockFrequency", wireType)
			}
			m.SessionBlockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionBlockFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoAlocation", wireType)
			}
			m.DaoAlocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaoAlocation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAllocation", wireType)
			}
			m.ProposerAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerAllocation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumChains", wireType)
			}
			m.MaximumChains = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumChains |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxJailedBlocks", wireType)
			}
			m.MaxJailedBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxJailedBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEvidenceAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxEvidenceAge, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBlocksWindow", wireType)
			}
			m.SignedBlocksWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBlocksWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSignedPerWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSignedPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DowntimeJailDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DowntimeJailDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDoubleSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDoubleSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDowntime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDowntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissedBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissedBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Missed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrevStatePowerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrevStatePowerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrevStatePowerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevStateTotalPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevStateTotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevStateValidatorPowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevStateValidatorPowers = append(m.PrevStateValidatorPowers, &PrevStatePowerMapping{})
			if err := m.PrevStateValidatorPowers[len(m.PrevStateValidatorPowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &ValidatorProto{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exported = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigningInfos == nil {
				m.SigningInfos = make(map[string]*ValidatorSigningInfo)
			}
			var mapkey string
			var mapvalue *ValidatorSigningInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValidatorSigningInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SigningInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MissedBlocks == nil {
				m.MissedBlocks = make(map[string]*MissedBlockArray)
			}
			var mapkey string
			var mapvalue *MissedBlockArray
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MissedBlockArray{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MissedBlocks[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousProposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousProposer = append(m.PreviousProposer[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousProposer == nil {
				m.PreviousProposer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissedBlockArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissedBlockArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissedBlockArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissedBlocks = append(m.MissedBlocks, &MissedBlock{})
			if err := m.MissedBlocks[len(m.MissedBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
