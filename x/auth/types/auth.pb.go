// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/auth/auth.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/pokt-network/pocket-core/codec/types"
	github_com_pokt_network_pocket_core_types "github.com/pokt-network/pocket-core/types"
	types "github.com/pokt-network/pocket-core/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BaseAccount defines a base account type. It contains all the necessary fields
// for basic account functionality. Any custom account type should extend this
// type for additional functionality (e.g. vesting).
type BaseAccountEncodable struct {
	Address github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"address,omitempty"`
	PubKey  string                                            `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"public_key,omitempty" yaml:"public_key"`
	Coins   github_com_pokt_network_pocket_core_types.Coins   `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/pokt-network/pocket-core/types.Coins" json:"coins"`
}

func (m *BaseAccountEncodable) Reset()         { *m = BaseAccountEncodable{} }
func (m *BaseAccountEncodable) String() string { return proto.CompactTextString(m) }
func (*BaseAccountEncodable) ProtoMessage()    {}
func (*BaseAccountEncodable) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{0}
}
func (m *BaseAccountEncodable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseAccountEncodable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseAccountEncodable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseAccountEncodable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseAccountEncodable.Merge(m, src)
}
func (m *BaseAccountEncodable) XXX_Size() int {
	return m.Size()
}
func (m *BaseAccountEncodable) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseAccountEncodable.DiscardUnknown(m)
}

var xxx_messageInfo_BaseAccountEncodable proto.InternalMessageInfo

// ModuleAccount defines an account for modules that holds coins on a pool
type ModuleAccountEncodable struct {
	*BaseAccountEncodable `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,embedded=base_account" json:"base_account,omitempty" yaml:"base_account"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permissions           []string `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *ModuleAccountEncodable) Reset()         { *m = ModuleAccountEncodable{} }
func (m *ModuleAccountEncodable) String() string { return proto.CompactTextString(m) }
func (*ModuleAccountEncodable) ProtoMessage()    {}
func (*ModuleAccountEncodable) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{1}
}
func (m *ModuleAccountEncodable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleAccountEncodable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleAccountEncodable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleAccountEncodable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleAccountEncodable.Merge(m, src)
}
func (m *ModuleAccountEncodable) XXX_Size() int {
	return m.Size()
}
func (m *ModuleAccountEncodable) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleAccountEncodable.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleAccountEncodable proto.InternalMessageInfo

// Params defines the parameters for the auth module.
type Params struct {
	MaxMemoCharacters uint64          `protobuf:"varint,1,opt,name=max_memo_characters,json=maxMemoCharacters,proto3" json:"max_memo_characters"`
	TxSigLimit        uint64          `protobuf:"varint,2,opt,name=tx_sig_limit,json=txSigLimit,proto3" json:"tx_sig_limit"`
	FeeMultiplier     *FeeMultipliers `protobuf:"bytes,3,opt,name=feeMultiplier,proto3" json:"fee_multipliers"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxMemoCharacters() uint64 {
	if m != nil {
		return m.MaxMemoCharacters
	}
	return 0
}

func (m *Params) GetTxSigLimit() uint64 {
	if m != nil {
		return m.TxSigLimit
	}
	return 0
}

func (m *Params) GetFeeMultiplier() *FeeMultipliers {
	if m != nil {
		return m.FeeMultiplier
	}
	return nil
}

// Fee Multiplier derfines a key value multiplier for the fee of the
type FeeMultiplier struct {
	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Multiplier int64  `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier"`
}

func (m *FeeMultiplier) Reset()         { *m = FeeMultiplier{} }
func (m *FeeMultiplier) String() string { return proto.CompactTextString(m) }
func (*FeeMultiplier) ProtoMessage()    {}
func (*FeeMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{3}
}
func (m *FeeMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeMultiplier.Merge(m, src)
}
func (m *FeeMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *FeeMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_FeeMultiplier proto.InternalMessageInfo

func (m *FeeMultiplier) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FeeMultiplier) GetMultiplier() int64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

type FeeMultipliers struct {
	FeeMultis []FeeMultiplier `protobuf:"bytes,1,rep,name=feeMultis,proto3" json:"fee_multiplier"`
	Default   int64           `protobuf:"varint,2,opt,name=default,proto3" json:"default"`
}

func (m *FeeMultipliers) Reset()         { *m = FeeMultipliers{} }
func (m *FeeMultipliers) String() string { return proto.CompactTextString(m) }
func (*FeeMultipliers) ProtoMessage()    {}
func (*FeeMultipliers) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{4}
}
func (m *FeeMultipliers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeMultipliers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeMultipliers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeMultipliers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeMultipliers.Merge(m, src)
}
func (m *FeeMultipliers) XXX_Size() int {
	return m.Size()
}
func (m *FeeMultipliers) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeMultipliers.DiscardUnknown(m)
}

var xxx_messageInfo_FeeMultipliers proto.InternalMessageInfo

func (m *FeeMultipliers) GetFeeMultis() []FeeMultiplier {
	if m != nil {
		return m.FeeMultis
	}
	return nil
}

func (m *FeeMultipliers) GetDefault() int64 {
	if m != nil {
		return m.Default
	}
	return 0
}

type Supply struct {
	Total github_com_pokt_network_pocket_core_types.Coins `protobuf:"bytes,1,rep,name=total,proto3,castrepeated=github.com/pokt-network/pocket-core/types.Coins" json:"total"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{5}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return m.Size()
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetTotal() github_com_pokt_network_pocket_core_types.Coins {
	if m != nil {
		return m.Total
	}
	return nil
}

type StdTx struct {
	Msg       types1.Any                                      `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Fee       github_com_pokt_network_pocket_core_types.Coins `protobuf:"bytes,2,rep,name=fee,proto3,castrepeated=github.com/pokt-network/pocket-core/types.Coins" json:"fee"`
	Signature StdSignature                                    `protobuf:"bytes,3,opt,name=signature,proto3,casttype=StdSignature" json:"signature"`
	Memo      string                                          `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo"`
	Entropy   int64                                           `protobuf:"varint,5,opt,name=entropy,proto3" json:"entropy"`
}

func (m *StdTx) Reset()         { *m = StdTx{} }
func (m *StdTx) String() string { return proto.CompactTextString(m) }
func (*StdTx) ProtoMessage()    {}
func (*StdTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{6}
}
func (m *StdTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdTx.Merge(m, src)
}
func (m *StdTx) XXX_Size() int {
	return m.Size()
}
func (m *StdTx) XXX_DiscardUnknown() {
	xxx_messageInfo_StdTx.DiscardUnknown(m)
}

var xxx_messageInfo_StdTx proto.InternalMessageInfo

type StdSignature struct {
	PublicKey string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"pub_key"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"signature"`
}

func (m *StdSignature) Reset()         { *m = StdSignature{} }
func (m *StdSignature) String() string { return proto.CompactTextString(m) }
func (*StdSignature) ProtoMessage()    {}
func (*StdSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_840f82faebe7fabc, []int{7}
}
func (m *StdSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdSignature.Merge(m, src)
}
func (m *StdSignature) XXX_Size() int {
	return m.Size()
}
func (m *StdSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_StdSignature.DiscardUnknown(m)
}

var xxx_messageInfo_StdSignature proto.InternalMessageInfo

func (m *StdSignature) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *StdSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseAccountEncodable)(nil), "x.auth.BaseAccountEncodable")
	proto.RegisterType((*ModuleAccountEncodable)(nil), "x.auth.ModuleAccountEncodable")
	proto.RegisterType((*Params)(nil), "x.auth.Params")
	proto.RegisterType((*FeeMultiplier)(nil), "x.auth.FeeMultiplier")
	proto.RegisterType((*FeeMultipliers)(nil), "x.auth.FeeMultipliers")
	proto.RegisterType((*Supply)(nil), "x.auth.Supply")
	proto.RegisterType((*StdTx)(nil), "x.auth.StdTx")
	proto.RegisterType((*StdSignature)(nil), "x.auth.StdSignature")
}

func init() { proto.RegisterFile("x/auth/auth.proto", fileDescriptor_840f82faebe7fabc) }

var fileDescriptor_840f82faebe7fabc = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x31, 0x6f, 0xe4, 0x44,
	0x14, 0x5e, 0x67, 0x37, 0xbb, 0xb7, 0xb3, 0x9b, 0x70, 0x99, 0x2c, 0x61, 0x73, 0x9c, 0x76, 0x82,
	0x25, 0xa4, 0x20, 0x88, 0x0d, 0xb9, 0x02, 0x69, 0x0b, 0x44, 0x7c, 0xe2, 0x90, 0x2e, 0x44, 0x82,
	0x59, 0x68, 0x4e, 0xa0, 0xd5, 0xd8, 0x9e, 0x75, 0xac, 0xd8, 0x1e, 0xcb, 0x1e, 0x8b, 0xf5, 0x3f,
	0xa0, 0x42, 0x94, 0x57, 0xa6, 0xa6, 0x86, 0x92, 0x9a, 0x2b, 0x23, 0x2a, 0x2a, 0x83, 0x36, 0x0d,
	0x72, 0x79, 0xe5, 0x55, 0x68, 0xc6, 0x76, 0xbc, 0xd6, 0xa5, 0x38, 0xa5, 0xb1, 0x66, 0xbe, 0xf7,
	0xde, 0xbc, 0xef, 0x7d, 0xef, 0xcd, 0x18, 0xec, 0x2c, 0x75, 0x92, 0xf0, 0x73, 0xf9, 0xd1, 0xc2,
	0x88, 0x71, 0x06, 0xbb, 0x4b, 0x4d, 0xec, 0x1e, 0xec, 0x5b, 0x2c, 0xf6, 0x59, 0x3c, 0x97, 0xa8,
	0x5e, 0x6c, 0x0a, 0x97, 0x07, 0x23, 0x87, 0x39, 0xac, 0xc0, 0xc5, 0xaa, 0x44, 0xef, 0xf3, 0x34,
	0xa4, 0xb1, 0x6e, 0x31, 0x37, 0x28, 0x91, 0x7d, 0x87, 0x31, 0xc7, 0xa3, 0xba, 0xdc, 0x99, 0xc9,
	0x42, 0x27, 0x41, 0x5a, 0x98, 0xd4, 0xdf, 0x37, 0xc0, 0xc8, 0x20, 0x31, 0x3d, 0xb1, 0x2c, 0x96,
	0x04, 0xfc, 0x8b, 0xc0, 0x62, 0x36, 0x31, 0x3d, 0x0a, 0x6d, 0xd0, 0x23, 0xb6, 0x1d, 0xd1, 0x38,
	0x1e, 0x2b, 0x07, 0xca, 0xe1, 0xd0, 0x78, 0x9a, 0x67, 0x68, 0xa7, 0x84, 0x3e, 0x62, 0xbe, 0xcb,
	0xa9, 0x1f, 0xf2, 0xf4, 0x55, 0x86, 0x3e, 0x71, 0x5c, 0x7e, 0x9e, 0x98, 0x9a, 0xc5, 0x7c, 0x3d,
	0x64, 0x17, 0xfc, 0x28, 0xa0, 0xfc, 0x47, 0x16, 0x5d, 0xe8, 0x21, 0xb3, 0x2e, 0x28, 0x3f, 0xb2,
	0x58, 0x44, 0x75, 0xc9, 0x49, 0x3b, 0x29, 0xc2, 0x71, 0x75, 0x34, 0x7c, 0x02, 0x7a, 0x61, 0x62,
	0xce, 0x2f, 0x68, 0x3a, 0xde, 0x38, 0x50, 0x0e, 0xfb, 0xc6, 0x51, 0x9e, 0xa1, 0x51, 0x98, 0x98,
	0x9e, 0x6b, 0x09, 0xb4, 0x4e, 0xf4, 0x32, 0x43, 0x3b, 0x29, 0xf1, 0xbd, 0xa9, 0x5a, 0x5b, 0x55,
	0xdc, 0x0d, 0x13, 0xf3, 0x94, 0xa6, 0xf0, 0x19, 0xd8, 0x14, 0xf5, 0xc6, 0xe3, 0xf6, 0x41, 0xfb,
	0x70, 0x70, 0x3c, 0xd0, 0x8a, 0x7c, 0x8f, 0x99, 0x1b, 0x18, 0x9f, 0xbe, 0xc8, 0x50, 0xeb, 0xd7,
	0x7f, 0x90, 0xfe, 0xe6, 0x3c, 0x45, 0x5c, 0x8c, 0x8b, 0x23, 0xa7, 0xbb, 0x3f, 0x5d, 0xa2, 0xd6,
	0xf3, 0x4b, 0xa4, 0xfc, 0xf5, 0xdb, 0x51, 0xaf, 0xd4, 0x49, 0xfd, 0x53, 0x01, 0x7b, 0x67, 0xcc,
	0x4e, 0xbc, 0xd7, 0x95, 0xfb, 0x1e, 0x0c, 0x4d, 0x12, 0xd3, 0x39, 0x29, 0x0c, 0x52, 0xbe, 0xc1,
	0xf1, 0x43, 0xad, 0xe8, 0xa7, 0x76, 0x9b, 0xda, 0xc6, 0xbb, 0x57, 0x19, 0x52, 0x5e, 0x66, 0x68,
	0xb7, 0x28, 0x71, 0x3d, 0x5e, 0xc5, 0x03, 0xb3, 0x0e, 0x81, 0x10, 0x74, 0x02, 0xe2, 0xd3, 0x42,
	0x2e, 0x2c, 0xd7, 0xf0, 0x00, 0x0c, 0x42, 0x1a, 0xf9, 0x6e, 0x1c, 0xbb, 0xac, 0xd4, 0xa0, 0x8f,
	0xd7, 0xa1, 0xe9, 0xfe, 0x5a, 0x0d, 0x5b, 0x0d, 0xde, 0xea, 0x4a, 0x01, 0xdd, 0xaf, 0x49, 0x44,
	0xfc, 0x18, 0x7e, 0x09, 0x76, 0x7d, 0xb2, 0x9c, 0xfb, 0xd4, 0x67, 0x73, 0xeb, 0x9c, 0x44, 0xc4,
	0xe2, 0x34, 0x2a, 0xfa, 0xdf, 0x31, 0xde, 0xc9, 0x33, 0x74, 0x9b, 0x19, 0xef, 0xf8, 0x64, 0x79,
	0x46, 0x7d, 0xf6, 0xf8, 0x06, 0x82, 0xc7, 0x60, 0xc8, 0x97, 0xf3, 0xd8, 0x75, 0xe6, 0x9e, 0xeb,
	0xbb, 0x5c, 0x92, 0xed, 0x18, 0xf7, 0xf3, 0x0c, 0x35, 0x70, 0x0c, 0xf8, 0x72, 0xe6, 0x3a, 0x5f,
	0x89, 0x35, 0xfc, 0x06, 0x6c, 0x2d, 0x28, 0x3d, 0x4b, 0x3c, 0xee, 0x86, 0x9e, 0x4b, 0xa3, 0x71,
	0x5b, 0xea, 0xb6, 0x57, 0xe9, 0xf6, 0x64, 0xdd, 0x18, 0x1b, 0xbb, 0x79, 0x86, 0xde, 0x5a, 0x50,
	0x3a, 0xf7, 0x6b, 0x10, 0x37, 0x4f, 0x98, 0xde, 0x7b, 0x7e, 0x89, 0x5a, 0xff, 0x5d, 0x22, 0x45,
	0xb5, 0xc1, 0x56, 0x23, 0x1e, 0xee, 0x83, 0xb6, 0x18, 0x3a, 0x45, 0x0e, 0x5d, 0x2f, 0xcf, 0x90,
	0xd8, 0x62, 0xf1, 0x81, 0x1a, 0x00, 0xf5, 0x99, 0x92, 0x7a, 0xdb, 0xd8, 0xce, 0x33, 0xb4, 0x86,
	0xe2, 0xb5, 0xb5, 0xcc, 0xa2, 0xc8, 0x2c, 0x3f, 0x2b, 0x60, 0xbb, 0x49, 0x13, 0x9e, 0x82, 0x7e,
	0xc5, 0x49, 0x08, 0x29, 0x86, 0xf3, 0xed, 0x5b, 0x2b, 0x32, 0xf6, 0xc4, 0x98, 0xe6, 0x19, 0xda,
	0x6e, 0x16, 0x85, 0xeb, 0x78, 0xf8, 0x3e, 0xe8, 0xd9, 0x74, 0x41, 0x12, 0x8f, 0x97, 0xb4, 0x06,
	0x79, 0x86, 0x2a, 0x08, 0x57, 0x8b, 0x35, 0x42, 0x31, 0xe8, 0xce, 0x92, 0x30, 0xf4, 0x52, 0x68,
	0x81, 0x4d, 0xce, 0x38, 0xf1, 0x4a, 0x0e, 0x8d, 0x0b, 0xf2, 0x79, 0x99, 0xb9, 0xf0, 0xb8, 0xd3,
	0x4d, 0x91, 0x91, 0xd3, 0x8e, 0x48, 0xac, 0xfe, 0xb1, 0x01, 0x36, 0x67, 0xdc, 0xfe, 0x76, 0x09,
	0x1f, 0x81, 0xb6, 0x1f, 0x3b, 0xe5, 0x05, 0x18, 0x69, 0xc5, 0x2b, 0xa4, 0x55, 0xaf, 0x90, 0x76,
	0x12, 0xa4, 0xc6, 0xa0, 0xcc, 0x2d, 0x1c, 0xb1, 0xf8, 0xc0, 0x1f, 0x40, 0x7b, 0x41, 0xc5, 0x7c,
	0xbf, 0xc6, 0xf3, 0xb3, 0xca, 0x77, 0x41, 0xe9, 0x5d, 0x58, 0x8a, 0x38, 0xf8, 0x1d, 0xe8, 0xc7,
	0xae, 0x13, 0x10, 0x9e, 0x44, 0xb4, 0x1c, 0xb1, 0x51, 0xd5, 0x90, 0x19, 0xb7, 0x67, 0x95, 0xcd,
	0x78, 0xaf, 0xcc, 0x56, 0xbb, 0xbf, 0xca, 0xd0, 0x70, 0xdd, 0x05, 0xd7, 0x26, 0xf8, 0x10, 0x74,
	0xc4, 0xbd, 0x18, 0x77, 0xe4, 0x40, 0xdd, 0xcb, 0x33, 0x24, 0xf7, 0x58, 0x7e, 0x45, 0xe3, 0x68,
	0xc0, 0x23, 0x16, 0xa6, 0xe3, 0xcd, 0xba, 0x71, 0x25, 0x84, 0xab, 0xc5, 0xb4, 0x23, 0x6e, 0xa9,
	0xba, 0x00, 0x8d, 0x2c, 0xf0, 0x03, 0xd0, 0x2f, 0x9e, 0xbc, 0xd3, 0x9b, 0x81, 0x95, 0xe1, 0xe5,
	0xc3, 0x89, 0x6b, 0x2b, 0xfc, 0x10, 0xf4, 0x6f, 0xe2, 0xe4, 0x88, 0x0c, 0x8d, 0xad, 0x46, 0x09,
	0xb8, 0xb6, 0x1b, 0x4f, 0x5f, 0xac, 0x26, 0xca, 0xd5, 0x6a, 0xa2, 0xfc, 0xbb, 0x9a, 0x28, 0xbf,
	0x5c, 0x4f, 0x5a, 0x57, 0xd7, 0x93, 0xd6, 0xdf, 0xd7, 0x93, 0xd6, 0xb3, 0x8f, 0xdf, 0x44, 0xd9,
	0xf2, 0x8f, 0x25, 0x05, 0x36, 0xbb, 0xb2, 0xa9, 0x8f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x66,
	0x7b, 0xd0, 0xc2, 0xc8, 0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxMemoCharacters != that1.MaxMemoCharacters {
		return false
	}
	if this.TxSigLimit != that1.TxSigLimit {
		return false
	}
	if !this.FeeMultiplier.Equal(that1.FeeMultiplier) {
		return false
	}
	return true
}
func (this *FeeMultiplier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeMultiplier)
	if !ok {
		that2, ok := that.(FeeMultiplier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Multiplier != that1.Multiplier {
		return false
	}
	return true
}
func (this *FeeMultipliers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeMultipliers)
	if !ok {
		that2, ok := that.(FeeMultipliers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FeeMultis) != len(that1.FeeMultis) {
		return false
	}
	for i := range this.FeeMultis {
		if !this.FeeMultis[i].Equal(&that1.FeeMultis[i]) {
			return false
		}
	}
	if this.Default != that1.Default {
		return false
	}
	return true
}
func (m *BaseAccountEncodable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseAccountEncodable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseAccountEncodable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleAccountEncodable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleAccountEncodable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleAccountEncodable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Permissions[iNdEx])
			copy(dAtA[i:], m.Permissions[iNdEx])
			i = encodeVarintAuth(dAtA, i, uint64(len(m.Permissions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseAccountEncodable != nil {
		{
			size, err := m.BaseAccountEncodable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeMultiplier != nil {
		{
			size, err := m.FeeMultiplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TxSigLimit != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.TxSigLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxMemoCharacters != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.MaxMemoCharacters))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeMultipliers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeMultipliers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeMultipliers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Default != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.Default))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeeMultis) > 0 {
		for iNdEx := len(m.FeeMultis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeMultis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Supply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StdTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entropy != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.Entropy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuth(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuth(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StdSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseAccountEncodable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *ModuleAccountEncodable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccountEncodable != nil {
		l = m.BaseAccountEncodable.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxMemoCharacters != 0 {
		n += 1 + sovAuth(uint64(m.MaxMemoCharacters))
	}
	if m.TxSigLimit != 0 {
		n += 1 + sovAuth(uint64(m.TxSigLimit))
	}
	if m.FeeMultiplier != nil {
		l = m.FeeMultiplier.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *FeeMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Multiplier != 0 {
		n += 1 + sovAuth(uint64(m.Multiplier))
	}
	return n
}

func (m *FeeMultipliers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeMultis) > 0 {
		for _, e := range m.FeeMultis {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if m.Default != 0 {
		n += 1 + sovAuth(uint64(m.Default))
	}
	return n
}

func (m *Supply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *StdTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Msg.Size()
	n += 1 + l + sovAuth(uint64(l))
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	l = m.Signature.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Entropy != 0 {
		n += 1 + sovAuth(uint64(m.Entropy))
	}
	return n
}

func (m *StdSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func sovAuth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseAccountEncodable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseAccountEncodable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseAccountEncodable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleAccountEncodable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleAccountEncodable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleAccountEncodable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccountEncodable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAccountEncodable == nil {
				m.BaseAccountEncodable = &BaseAccountEncodable{}
			}
			if err := m.BaseAccountEncodable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemoCharacters", wireType)
			}
			m.MaxMemoCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemoCharacters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSigLimit", wireType)
			}
			m.TxSigLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSigLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMultiplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeMultiplier == nil {
				m.FeeMultiplier = &FeeMultipliers{}
			}
			if err := m.FeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeMultipliers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeMultipliers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeMultipliers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMultis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeMultis = append(m.FeeMultis, FeeMultiplier{})
			if err := m.FeeMultis[len(m.FeeMultis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			m.Default = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Default |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.Coin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			m.Entropy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entropy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuth = fmt.Errorf("proto: unexpected end of group")
)
